webpackJsonp([1],{

/***/ 464:
/***/ (function(module, exports, __webpack_require__) {

eval("\n/* styles */\n__webpack_require__(698)\n\nvar Component = __webpack_require__(2)(\n  /* script */\n  __webpack_require__(575),\n  /* template */\n  __webpack_require__(644),\n  /* scopeId */\n  \"data-v-743fe797\",\n  /* cssModules */\n  null\n)\nComponent.options.__file = \"/zuv/wui/zuv-front/view/src/demo/page/page_form_upload.vue\"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== \"default\" && key !== \"__esModule\"})) {console.error(\"named exports are not supported in *.vue files.\")}\nif (Component.options.functional) {console.error(\"[vue-loader] page_form_upload.vue: functional components are not supported with templates, they should use render functions.\")}\n\n/* hot reload */\nif (true) {(function () {\n  var hotAPI = __webpack_require__(0)\n  hotAPI.install(__webpack_require__(1), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-743fe797\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-743fe797\", Component.options)\n  }\n})()}\n\nmodule.exports = Component.exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZGVtby9wYWdlL3BhZ2VfZm9ybV91cGxvYWQudnVlP2ZlMmQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBO0FBQ0EsdUJBQXNLOztBQUV0SztBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUFzRztBQUN0RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrRUFBK0UsaURBQWlELElBQUk7QUFDcEksbUNBQW1DOztBQUVuQztBQUNBLFdBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCIsImZpbGUiOiI0NjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qIHN0eWxlcyAqL1xucmVxdWlyZShcIiEhdnVlLXN0eWxlLWxvYWRlciFjc3MtbG9hZGVyIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTc0M2ZlNzk3XFxcIixcXFwic2NvcGVkXFxcIjp0cnVlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOnRydWV9IXNhc3MtbG9hZGVyIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXN0eWxlcyZpbmRleD0wIS4vcGFnZV9mb3JtX3VwbG9hZC52dWVcIilcblxudmFyIENvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpKFxuICAvKiBzY3JpcHQgKi9cbiAgcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vcGFnZV9mb3JtX3VwbG9hZC52dWVcIiksXG4gIC8qIHRlbXBsYXRlICovXG4gIHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTc0M2ZlNzk3XFxcIn0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3BhZ2VfZm9ybV91cGxvYWQudnVlXCIpLFxuICAvKiBzY29wZUlkICovXG4gIFwiZGF0YS12LTc0M2ZlNzk3XCIsXG4gIC8qIGNzc01vZHVsZXMgKi9cbiAgbnVsbFxuKVxuQ29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCIvenV2L3d1aS96dXYtZnJvbnQvdmlldy9zcmMvZGVtby9wYWdlL3BhZ2VfZm9ybV91cGxvYWQudnVlXCJcbmlmIChDb21wb25lbnQuZXNNb2R1bGUgJiYgT2JqZWN0LmtleXMoQ29tcG9uZW50LmVzTW9kdWxlKS5zb21lKGZ1bmN0aW9uIChrZXkpIHtyZXR1cm4ga2V5ICE9PSBcImRlZmF1bHRcIiAmJiBrZXkgIT09IFwiX19lc01vZHVsZVwifSkpIHtjb25zb2xlLmVycm9yKFwibmFtZWQgZXhwb3J0cyBhcmUgbm90IHN1cHBvcnRlZCBpbiAqLnZ1ZSBmaWxlcy5cIil9XG5pZiAoQ29tcG9uZW50Lm9wdGlvbnMuZnVuY3Rpb25hbCkge2NvbnNvbGUuZXJyb3IoXCJbdnVlLWxvYWRlcl0gcGFnZV9mb3JtX3VwbG9hZC52dWU6IGZ1bmN0aW9uYWwgY29tcG9uZW50cyBhcmUgbm90IHN1cHBvcnRlZCB3aXRoIHRlbXBsYXRlcywgdGhleSBzaG91bGQgdXNlIHJlbmRlciBmdW5jdGlvbnMuXCIpfVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkgeyhmdW5jdGlvbiAoKSB7XG4gIHZhciBob3RBUEkgPSByZXF1aXJlKFwidnVlLWxvYWRlci9ub2RlX21vZHVsZXMvdnVlLWhvdC1yZWxvYWQtYXBpXCIpXG4gIGhvdEFQSS5pbnN0YWxsKHJlcXVpcmUoXCJ2dWVcIiksIGZhbHNlKVxuICBpZiAoIWhvdEFQSS5jb21wYXRpYmxlKSByZXR1cm5cbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAoIW1vZHVsZS5ob3QuZGF0YSkge1xuICAgIGhvdEFQSS5jcmVhdGVSZWNvcmQoXCJkYXRhLXYtNzQzZmU3OTdcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH0gZWxzZSB7XG4gICAgaG90QVBJLnJlbG9hZChcImRhdGEtdi03NDNmZTc5N1wiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfVxufSkoKX1cblxubW9kdWxlLmV4cG9ydHMgPSBDb21wb25lbnQuZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvZGVtby9wYWdlL3BhZ2VfZm9ybV91cGxvYWQudnVlXG4vLyBtb2R1bGUgaWQgPSA0NjRcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///464\n");

/***/ }),

/***/ 532:
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(12)();\n// imports\n\n\n// module\nexports.push([module.i, \"\", \"\"]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZGVtby9wYWdlL3BhZ2VfZm9ybV91cGxvYWQudnVlPzIwNTkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQSIsImZpbGUiOiI1MzIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKCk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJcIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY3NzLWxvYWRlciEuL34vdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXI/e1wiaWRcIjpcImRhdGEtdi03NDNmZTc5N1wiLFwic2NvcGVkXCI6dHJ1ZSxcImhhc0lubGluZUNvbmZpZ1wiOnRydWV9IS4vfi9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vc3JjL2RlbW8vcGFnZS9wYWdlX2Zvcm1fdXBsb2FkLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNTMyXG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///532\n");

/***/ }),

/***/ 575:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _imageExif = __webpack_require__(607);\n\nvar _imageExif2 = _interopRequireDefault(_imageExif);\n\nvar _imageCompressor = __webpack_require__(606);\n\nvar _imageCompressor2 = _interopRequireDefault(_imageCompressor);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = {\n    data: function data() {\n        return {\n            message: '文件上传'\n        };\n    },\n\n    methods: {\n        _on_upload_terminate: function _on_upload_terminate(message) {\n            console.log('_on_upload_terminate', message);\n        },\n        _on_upload_prepare: function _on_upload_prepare() {\n            console.log('_on_upload_prepare');\n        },\n\n\n        _on_upload_progress: function _on_upload_progress(event, file, fileList) {\n            console.log('_on_upload_progress', event.percent, event.loaded, event.total);\n        },\n        _on_upload_success: function _on_upload_success(response, file, fileList) {\n            console.log('_on_upload_success', response, file, fileList);\n        },\n        _on_upload_error: function _on_upload_error(error, file, fileList) {\n            console.log('_on_upload_error', error, file, fileList);\n        },\n\n        _on_file_preview: function _on_file_preview(file) {\n            console.log('_on_file_preview', file);\n        },\n        _on_file_remove: function _on_file_remove(file, fileList) {\n            console.log('_on_file_remove', file, fileList);\n        },\n        _on_file_format_error: function _on_file_format_error(file, fileList) {\n            console.log('_on_file_format_error', file, fileList);\n        },\n        _on_file_exceeded_size: function _on_file_exceeded_size(file, fileList) {\n            console.log('_on_file_exceeded_size', file, fileList);\n        },\n\n        _switch_render_image: function _switch_render_image(file, callback) {\n            console.log('_switch_render_image');\n\n            var max_width = 1280;\n            var max_height = 960;\n            var max_quality = 0.9;\n\n            if (!navigator.userAgent.match(/iphone/i)) {\n                _imageCompressor2.default._render_image_to_blob(file, max_width, max_height, max_quality, null, callback);\n                return;\n            }\n\n            _imageExif2.default.getData(file, function () {\n                var metaall = _imageExif2.default.getAllTags(this);\n                console.log('metaall', metaall);\n                var orientation = _imageExif2.default.getTag(this, 'Orientation');\n                console.log('orientation', orientation);\n                _imageCompressor2.default._render_image_to_blob(file, max_width, max_height, max_quality, orientation, callback);\n            });\n        },\n        _exec_http_upload_file: function _exec_http_upload_file(eventid, formdata) {\n            console.log('_exec_http_upload_file', eventid, formdata);\n\n            console.log('执行上传');\n        }\n    }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///575\n");

/***/ }),

/***/ 606:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _stringify = __webpack_require__(39);\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _imageMegapix = __webpack_require__(608);\n\nvar _imageMegapix2 = _interopRequireDefault(_imageMegapix);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar compressor = {};\n\ncompressor._render_image_to_blob = function (_file, _maxwidth, _maxheight, _quality, _orientation, callback) {\n    console.log('_render_image_to_blob', _file.name, _maxwidth, _maxheight, _quality, _orientation);\n\n    var config = void 0;\n    if (!_orientation || _orientation == '' || _orientation == 1) {\n        config = { maxWidth: _maxwidth, quality: _quality };\n    } else if (_orientation == 3) {\n        config = { maxWidth: _maxwidth, quality: _quality, orientation: _orientation };\n    } else {\n        config = { maxHeight: _maxheight, quality: _quality, orientation: _orientation };\n    }\n    console.log('config ' + (0, _stringify2.default)(config));\n\n    var mpImg = new _imageMegapix2.default(_file);\n\n    mpImg.render(null, config, null, function (blob, dataurl) {\n        console.log('blob', blob.size, 'dataurl', dataurl.length, 'file', _file.size, 'orie', _orientation);\n        if (callback) callback(blob);\n    });\n};\n\ncompressor._render_image_to_element = function (_file, _maxwidth, _maxheight, _quality, _orientation, _elementids) {\n    console.log('_render_image_to_element', _file.name, _maxwidth, _maxheight, _quality, _orientation, _elementids);\n\n    var config = void 0;\n    if (!_orientation || _orientation == '' || _orientation == 1) {\n        config = { maxWidth: _maxwidth, quality: _quality };\n    } else if (_orientation == 3) {\n        config = { maxWidth: _maxwidth, quality: _quality, orientation: _orientation };\n    } else {\n        config = { maxHeight: _maxheight, quality: _quality, orientation: _orientation };\n    }\n    console.log('config ' + (0, _stringify2.default)(config));\n\n    var mpImg = new _imageMegapix2.default(_file);\n    for (var i = 0; i < _elementids.length; i++) {\n        mpImg.render(document.getElementById(_elementids[i]), config);\n    }\n};\n\nexports.default = compressor;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbC9pbWFnZS1jb21wcmVzc29yLmpzPzVkNGIiXSwibmFtZXMiOlsiY29tcHJlc3NvciIsIl9yZW5kZXJfaW1hZ2VfdG9fYmxvYiIsIl9maWxlIiwiX21heHdpZHRoIiwiX21heGhlaWdodCIsIl9xdWFsaXR5IiwiX29yaWVudGF0aW9uIiwiY2FsbGJhY2siLCJjb25zb2xlIiwibG9nIiwibmFtZSIsImNvbmZpZyIsIm1heFdpZHRoIiwicXVhbGl0eSIsIm9yaWVudGF0aW9uIiwibWF4SGVpZ2h0IiwibXBJbWciLCJyZW5kZXIiLCJibG9iIiwiZGF0YXVybCIsInNpemUiLCJsZW5ndGgiLCJfcmVuZGVyX2ltYWdlX3RvX2VsZW1lbnQiLCJfZWxlbWVudGlkcyIsImkiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7Ozs7OztBQUdBLElBQUlBLGFBQWEsRUFBakI7O0FBY0FBLFdBQVdDLHFCQUFYLEdBQW1DLFVBQVVDLEtBQVYsRUFBaUJDLFNBQWpCLEVBQTRCQyxVQUE1QixFQUF3Q0MsUUFBeEMsRUFBa0RDLFlBQWxELEVBQWdFQyxRQUFoRSxFQUEwRTtBQUN6R0MsWUFBUUMsR0FBUixDQUFZLHVCQUFaLEVBQXFDUCxNQUFNUSxJQUEzQyxFQUFpRFAsU0FBakQsRUFBNERDLFVBQTVELEVBQXdFQyxRQUF4RSxFQUFtRkMsWUFBbkY7O0FBR0EsUUFBSUssZUFBSjtBQUNBLFFBQUcsQ0FBQ0wsWUFBRCxJQUFpQkEsZ0JBQWMsRUFBL0IsSUFBcUNBLGdCQUFjLENBQXRELEVBQXlEO0FBQ3JESyxpQkFBUyxFQUFFQyxVQUFVVCxTQUFaLEVBQXVCVSxTQUFTUixRQUFoQyxFQUFUO0FBQ0gsS0FGRCxNQUdLLElBQUdDLGdCQUFjLENBQWpCLEVBQW9CO0FBQ3JCSyxpQkFBUyxFQUFFQyxVQUFVVCxTQUFaLEVBQXVCVSxTQUFTUixRQUFoQyxFQUEwQ1MsYUFBYVIsWUFBdkQsRUFBVDtBQUNILEtBRkksTUFHQTtBQUNESyxpQkFBUyxFQUFFSSxXQUFXWCxVQUFiLEVBQXlCUyxTQUFTUixRQUFsQyxFQUE0Q1MsYUFBYVIsWUFBekQsRUFBVDtBQUNIO0FBQ0RFLFlBQVFDLEdBQVIsQ0FBWSxZQUFXLHlCQUFlRSxNQUFmLENBQXZCOztBQUdBLFFBQUlLLFFBQVEsMkJBQWlCZCxLQUFqQixDQUFaOztBQUVBYyxVQUFNQyxNQUFOLENBQWEsSUFBYixFQUFtQk4sTUFBbkIsRUFBMkIsSUFBM0IsRUFBaUMsVUFBVU8sSUFBVixFQUFnQkMsT0FBaEIsRUFBeUI7QUFDdERYLGdCQUFRQyxHQUFSLENBQVksTUFBWixFQUFvQlMsS0FBS0UsSUFBekIsRUFBK0IsU0FBL0IsRUFBMENELFFBQVFFLE1BQWxELEVBQTBELE1BQTFELEVBQWtFbkIsTUFBTWtCLElBQXhFLEVBQThFLE1BQTlFLEVBQXNGZCxZQUF0RjtBQUNBLFlBQUdDLFFBQUgsRUFBYUEsU0FBU1csSUFBVDtBQUNoQixLQUhEO0FBSUgsQ0F2QkQ7O0FBeUJBbEIsV0FBV3NCLHdCQUFYLEdBQXNDLFVBQVVwQixLQUFWLEVBQWlCQyxTQUFqQixFQUE0QkMsVUFBNUIsRUFBd0NDLFFBQXhDLEVBQWtEQyxZQUFsRCxFQUFnRWlCLFdBQWhFLEVBQTZFO0FBQy9HZixZQUFRQyxHQUFSLENBQVksMEJBQVosRUFBd0NQLE1BQU1RLElBQTlDLEVBQW9EUCxTQUFwRCxFQUErREMsVUFBL0QsRUFBMkVDLFFBQTNFLEVBQXNGQyxZQUF0RixFQUFvR2lCLFdBQXBHOztBQUdBLFFBQUlaLGVBQUo7QUFDQSxRQUFHLENBQUNMLFlBQUQsSUFBaUJBLGdCQUFjLEVBQS9CLElBQXFDQSxnQkFBYyxDQUF0RCxFQUF5RDtBQUNyREssaUJBQVMsRUFBRUMsVUFBVVQsU0FBWixFQUF1QlUsU0FBU1IsUUFBaEMsRUFBVDtBQUNILEtBRkQsTUFHSyxJQUFHQyxnQkFBYyxDQUFqQixFQUFvQjtBQUNyQkssaUJBQVMsRUFBRUMsVUFBVVQsU0FBWixFQUF1QlUsU0FBU1IsUUFBaEMsRUFBMENTLGFBQWFSLFlBQXZELEVBQVQ7QUFDSCxLQUZJLE1BR0E7QUFDREssaUJBQVMsRUFBRUksV0FBV1gsVUFBYixFQUF5QlMsU0FBU1IsUUFBbEMsRUFBNENTLGFBQWFSLFlBQXpELEVBQVQ7QUFDSDtBQUNERSxZQUFRQyxHQUFSLENBQVksWUFBVyx5QkFBZUUsTUFBZixDQUF2Qjs7QUFHQSxRQUFJSyxRQUFRLDJCQUFpQmQsS0FBakIsQ0FBWjtBQUNBLFNBQUksSUFBSXNCLElBQUUsQ0FBVixFQUFhQSxJQUFFRCxZQUFZRixNQUEzQixFQUFtQ0csR0FBbkMsRUFBd0M7QUFDcENSLGNBQU1DLE1BQU4sQ0FBYVEsU0FBU0MsY0FBVCxDQUF3QkgsWUFBWUMsQ0FBWixDQUF4QixDQUFiLEVBQXNEYixNQUF0RDtBQUNIO0FBQ0osQ0FyQkQ7O2tCQXdCZVgsVSIsImZpbGUiOiI2MDYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTWVnYVBpeEltYWdlIGZyb20gJy4vaW1hZ2UtbWVnYXBpeCc7XG5cbi8vXG5sZXQgY29tcHJlc3NvciA9IHtcblxufTtcblxuLypcbiDkuIos5Y+zLOS4iyzlt6ZcbiA2LDEsOCwzXG5cbiA2ICDpobrml7bpkog5MOW6plxuIDEgIOS4jeWKqFxuIDggIOmAhuaXtumSiDkwXG4gMyAgMTgw5bqmXG4gKi9cblxuY29tcHJlc3Nvci5fcmVuZGVyX2ltYWdlX3RvX2Jsb2IgPSBmdW5jdGlvbiAoX2ZpbGUsIF9tYXh3aWR0aCwgX21heGhlaWdodCwgX3F1YWxpdHksIF9vcmllbnRhdGlvbiwgY2FsbGJhY2spIHtcbiAgICBjb25zb2xlLmxvZygnX3JlbmRlcl9pbWFnZV90b19ibG9iJywgX2ZpbGUubmFtZSwgX21heHdpZHRoLCBfbWF4aGVpZ2h0LCBfcXVhbGl0eSwgIF9vcmllbnRhdGlvbik7XG5cbiAgICAvL1xuICAgIGxldCBjb25maWc7XG4gICAgaWYoIV9vcmllbnRhdGlvbiB8fCBfb3JpZW50YXRpb249PScnIHx8IF9vcmllbnRhdGlvbj09MSkge1xuICAgICAgICBjb25maWcgPSB7IG1heFdpZHRoOiBfbWF4d2lkdGgsIHF1YWxpdHk6IF9xdWFsaXR5IH07XG4gICAgfVxuICAgIGVsc2UgaWYoX29yaWVudGF0aW9uPT0zKSB7XG4gICAgICAgIGNvbmZpZyA9IHsgbWF4V2lkdGg6IF9tYXh3aWR0aCwgcXVhbGl0eTogX3F1YWxpdHksIG9yaWVudGF0aW9uOiBfb3JpZW50YXRpb24gfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbmZpZyA9IHsgbWF4SGVpZ2h0OiBfbWF4aGVpZ2h0LCBxdWFsaXR5OiBfcXVhbGl0eSwgb3JpZW50YXRpb246IF9vcmllbnRhdGlvbiB9O1xuICAgIH1cbiAgICBjb25zb2xlLmxvZygnY29uZmlnICcrIEpTT04uc3RyaW5naWZ5KGNvbmZpZykpO1xuXG4gICAgLy9cbiAgICB2YXIgbXBJbWcgPSBuZXcgTWVnYVBpeEltYWdlKF9maWxlKTtcbiAgICAvL1xuICAgIG1wSW1nLnJlbmRlcihudWxsLCBjb25maWcsIG51bGwsIGZ1bmN0aW9uIChibG9iLCBkYXRhdXJsKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdibG9iJywgYmxvYi5zaXplLCAnZGF0YXVybCcsIGRhdGF1cmwubGVuZ3RoLCAnZmlsZScsIF9maWxlLnNpemUsICdvcmllJywgX29yaWVudGF0aW9uKTtcbiAgICAgICAgaWYoY2FsbGJhY2spIGNhbGxiYWNrKGJsb2IpO1xuICAgIH0pO1xufTtcblxuY29tcHJlc3Nvci5fcmVuZGVyX2ltYWdlX3RvX2VsZW1lbnQgPSBmdW5jdGlvbiAoX2ZpbGUsIF9tYXh3aWR0aCwgX21heGhlaWdodCwgX3F1YWxpdHksIF9vcmllbnRhdGlvbiwgX2VsZW1lbnRpZHMpIHtcbiAgICBjb25zb2xlLmxvZygnX3JlbmRlcl9pbWFnZV90b19lbGVtZW50JywgX2ZpbGUubmFtZSwgX21heHdpZHRoLCBfbWF4aGVpZ2h0LCBfcXVhbGl0eSwgIF9vcmllbnRhdGlvbiwgX2VsZW1lbnRpZHMpO1xuXG4gICAgLy9cbiAgICBsZXQgY29uZmlnO1xuICAgIGlmKCFfb3JpZW50YXRpb24gfHwgX29yaWVudGF0aW9uPT0nJyB8fCBfb3JpZW50YXRpb249PTEpIHtcbiAgICAgICAgY29uZmlnID0geyBtYXhXaWR0aDogX21heHdpZHRoLCBxdWFsaXR5OiBfcXVhbGl0eSB9O1xuICAgIH1cbiAgICBlbHNlIGlmKF9vcmllbnRhdGlvbj09Mykge1xuICAgICAgICBjb25maWcgPSB7IG1heFdpZHRoOiBfbWF4d2lkdGgsIHF1YWxpdHk6IF9xdWFsaXR5LCBvcmllbnRhdGlvbjogX29yaWVudGF0aW9uIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25maWcgPSB7IG1heEhlaWdodDogX21heGhlaWdodCwgcXVhbGl0eTogX3F1YWxpdHksIG9yaWVudGF0aW9uOiBfb3JpZW50YXRpb24gfTtcbiAgICB9XG4gICAgY29uc29sZS5sb2coJ2NvbmZpZyAnKyBKU09OLnN0cmluZ2lmeShjb25maWcpKTtcblxuICAgIC8vXG4gICAgdmFyIG1wSW1nID0gbmV3IE1lZ2FQaXhJbWFnZShfZmlsZSk7XG4gICAgZm9yKGxldCBpPTA7IGk8X2VsZW1lbnRpZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbXBJbWcucmVuZGVyKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKF9lbGVtZW50aWRzW2ldKSwgY29uZmlnKTtcbiAgICB9XG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbXByZXNzb3I7XG5cblxuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvdXRpbC9pbWFnZS1jb21wcmVzc29yLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///606\n");

/***/ }),

/***/ 607:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\nvar _typeof2 = __webpack_require__(31);\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _stringify = __webpack_require__(39);\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(function () {\n\n    var debug = false;\n\n    var root = this;\n\n    var EXIF = function EXIF(obj) {\n        if (obj instanceof EXIF) return obj;\n        if (!(this instanceof EXIF)) return new EXIF(obj);\n        this.EXIFwrapped = obj;\n    };\n\n    if (true) {\n        if (typeof module !== 'undefined' && module.exports) {\n            exports = module.exports = EXIF;\n        }\n        exports.EXIF = EXIF;\n    } else {\n        root.EXIF = EXIF;\n    }\n\n    var ExifTags = EXIF.Tags = {\n        0x9000: \"ExifVersion\",\n        0xA000: \"FlashpixVersion\",\n        0xA001: \"ColorSpace\",\n        0xA002: \"PixelXDimension\",\n        0xA003: \"PixelYDimension\",\n        0x9101: \"ComponentsConfiguration\",\n        0x9102: \"CompressedBitsPerPixel\",\n        0x927C: \"MakerNote\",\n        0x9286: \"UserComment\",\n        0xA004: \"RelatedSoundFile\",\n        0x9003: \"DateTimeOriginal\",\n        0x9004: \"DateTimeDigitized\",\n        0x9290: \"SubsecTime\",\n        0x9291: \"SubsecTimeOriginal\",\n        0x9292: \"SubsecTimeDigitized\",\n        0x829A: \"ExposureTime\",\n        0x829D: \"FNumber\",\n        0x8822: \"ExposureProgram\",\n        0x8824: \"SpectralSensitivity\",\n        0x8827: \"ISOSpeedRatings\",\n        0x8828: \"OECF\",\n        0x9201: \"ShutterSpeedValue\",\n        0x9202: \"ApertureValue\",\n        0x9203: \"BrightnessValue\",\n        0x9204: \"ExposureBias\",\n        0x9205: \"MaxApertureValue\",\n        0x9206: \"SubjectDistance\",\n        0x9207: \"MeteringMode\",\n        0x9208: \"LightSource\",\n        0x9209: \"Flash\",\n        0x9214: \"SubjectArea\",\n        0x920A: \"FocalLength\",\n        0xA20B: \"FlashEnergy\",\n        0xA20C: \"SpatialFrequencyResponse\",\n        0xA20E: \"FocalPlaneXResolution\",\n        0xA20F: \"FocalPlaneYResolution\",\n        0xA210: \"FocalPlaneResolutionUnit\",\n        0xA214: \"SubjectLocation\",\n        0xA215: \"ExposureIndex\",\n        0xA217: \"SensingMethod\",\n        0xA300: \"FileSource\",\n        0xA301: \"SceneType\",\n        0xA302: \"CFAPattern\",\n        0xA401: \"CustomRendered\",\n        0xA402: \"ExposureMode\",\n        0xA403: \"WhiteBalance\",\n        0xA404: \"DigitalZoomRation\",\n        0xA405: \"FocalLengthIn35mmFilm\",\n        0xA406: \"SceneCaptureType\",\n        0xA407: \"GainControl\",\n        0xA408: \"Contrast\",\n        0xA409: \"Saturation\",\n        0xA40A: \"Sharpness\",\n        0xA40B: \"DeviceSettingDescription\",\n        0xA40C: \"SubjectDistanceRange\",\n        0xA005: \"InteroperabilityIFDPointer\",\n        0xA420: \"ImageUniqueID\" };\n\n    var TiffTags = EXIF.TiffTags = {\n        0x0100: \"ImageWidth\",\n        0x0101: \"ImageHeight\",\n        0x8769: \"ExifIFDPointer\",\n        0x8825: \"GPSInfoIFDPointer\",\n        0xA005: \"InteroperabilityIFDPointer\",\n        0x0102: \"BitsPerSample\",\n        0x0103: \"Compression\",\n        0x0106: \"PhotometricInterpretation\",\n        0x0112: \"Orientation\",\n        0x0115: \"SamplesPerPixel\",\n        0x011C: \"PlanarConfiguration\",\n        0x0212: \"YCbCrSubSampling\",\n        0x0213: \"YCbCrPositioning\",\n        0x011A: \"XResolution\",\n        0x011B: \"YResolution\",\n        0x0128: \"ResolutionUnit\",\n        0x0111: \"StripOffsets\",\n        0x0116: \"RowsPerStrip\",\n        0x0117: \"StripByteCounts\",\n        0x0201: \"JPEGInterchangeFormat\",\n        0x0202: \"JPEGInterchangeFormatLength\",\n        0x012D: \"TransferFunction\",\n        0x013E: \"WhitePoint\",\n        0x013F: \"PrimaryChromaticities\",\n        0x0211: \"YCbCrCoefficients\",\n        0x0214: \"ReferenceBlackWhite\",\n        0x0132: \"DateTime\",\n        0x010E: \"ImageDescription\",\n        0x010F: \"Make\",\n        0x0110: \"Model\",\n        0x0131: \"Software\",\n        0x013B: \"Artist\",\n        0x8298: \"Copyright\"\n    };\n\n    var GPSTags = EXIF.GPSTags = {\n        0x0000: \"GPSVersionID\",\n        0x0001: \"GPSLatitudeRef\",\n        0x0002: \"GPSLatitude\",\n        0x0003: \"GPSLongitudeRef\",\n        0x0004: \"GPSLongitude\",\n        0x0005: \"GPSAltitudeRef\",\n        0x0006: \"GPSAltitude\",\n        0x0007: \"GPSTimeStamp\",\n        0x0008: \"GPSSatellites\",\n        0x0009: \"GPSStatus\",\n        0x000A: \"GPSMeasureMode\",\n        0x000B: \"GPSDOP\",\n        0x000C: \"GPSSpeedRef\",\n        0x000D: \"GPSSpeed\",\n        0x000E: \"GPSTrackRef\",\n        0x000F: \"GPSTrack\",\n        0x0010: \"GPSImgDirectionRef\",\n        0x0011: \"GPSImgDirection\",\n        0x0012: \"GPSMapDatum\",\n        0x0013: \"GPSDestLatitudeRef\",\n        0x0014: \"GPSDestLatitude\",\n        0x0015: \"GPSDestLongitudeRef\",\n        0x0016: \"GPSDestLongitude\",\n        0x0017: \"GPSDestBearingRef\",\n        0x0018: \"GPSDestBearing\",\n        0x0019: \"GPSDestDistanceRef\",\n        0x001A: \"GPSDestDistance\",\n        0x001B: \"GPSProcessingMethod\",\n        0x001C: \"GPSAreaInformation\",\n        0x001D: \"GPSDateStamp\",\n        0x001E: \"GPSDifferential\"\n    };\n\n    var IFD1Tags = EXIF.IFD1Tags = {\n        0x0100: \"ImageWidth\",\n        0x0101: \"ImageHeight\",\n        0x0102: \"BitsPerSample\",\n        0x0103: \"Compression\",\n        0x0106: \"PhotometricInterpretation\",\n        0x0111: \"StripOffsets\",\n        0x0112: \"Orientation\",\n        0x0115: \"SamplesPerPixel\",\n        0x0116: \"RowsPerStrip\",\n        0x0117: \"StripByteCounts\",\n        0x011A: \"XResolution\",\n        0x011B: \"YResolution\",\n        0x011C: \"PlanarConfiguration\",\n        0x0128: \"ResolutionUnit\",\n        0x0201: \"JpegIFOffset\",\n        0x0202: \"JpegIFByteCount\",\n        0x0211: \"YCbCrCoefficients\",\n        0x0212: \"YCbCrSubSampling\",\n        0x0213: \"YCbCrPositioning\",\n        0x0214: \"ReferenceBlackWhite\"\n    };\n\n    var StringValues = EXIF.StringValues = {\n        ExposureProgram: {\n            0: \"Not defined\",\n            1: \"Manual\",\n            2: \"Normal program\",\n            3: \"Aperture priority\",\n            4: \"Shutter priority\",\n            5: \"Creative program\",\n            6: \"Action program\",\n            7: \"Portrait mode\",\n            8: \"Landscape mode\"\n        },\n        MeteringMode: {\n            0: \"Unknown\",\n            1: \"Average\",\n            2: \"CenterWeightedAverage\",\n            3: \"Spot\",\n            4: \"MultiSpot\",\n            5: \"Pattern\",\n            6: \"Partial\",\n            255: \"Other\"\n        },\n        LightSource: {\n            0: \"Unknown\",\n            1: \"Daylight\",\n            2: \"Fluorescent\",\n            3: \"Tungsten (incandescent light)\",\n            4: \"Flash\",\n            9: \"Fine weather\",\n            10: \"Cloudy weather\",\n            11: \"Shade\",\n            12: \"Daylight fluorescent (D 5700 - 7100K)\",\n            13: \"Day white fluorescent (N 4600 - 5400K)\",\n            14: \"Cool white fluorescent (W 3900 - 4500K)\",\n            15: \"White fluorescent (WW 3200 - 3700K)\",\n            17: \"Standard light A\",\n            18: \"Standard light B\",\n            19: \"Standard light C\",\n            20: \"D55\",\n            21: \"D65\",\n            22: \"D75\",\n            23: \"D50\",\n            24: \"ISO studio tungsten\",\n            255: \"Other\"\n        },\n        Flash: {\n            0x0000: \"Flash did not fire\",\n            0x0001: \"Flash fired\",\n            0x0005: \"Strobe return light not detected\",\n            0x0007: \"Strobe return light detected\",\n            0x0009: \"Flash fired, compulsory flash mode\",\n            0x000D: \"Flash fired, compulsory flash mode, return light not detected\",\n            0x000F: \"Flash fired, compulsory flash mode, return light detected\",\n            0x0010: \"Flash did not fire, compulsory flash mode\",\n            0x0018: \"Flash did not fire, auto mode\",\n            0x0019: \"Flash fired, auto mode\",\n            0x001D: \"Flash fired, auto mode, return light not detected\",\n            0x001F: \"Flash fired, auto mode, return light detected\",\n            0x0020: \"No flash function\",\n            0x0041: \"Flash fired, red-eye reduction mode\",\n            0x0045: \"Flash fired, red-eye reduction mode, return light not detected\",\n            0x0047: \"Flash fired, red-eye reduction mode, return light detected\",\n            0x0049: \"Flash fired, compulsory flash mode, red-eye reduction mode\",\n            0x004D: \"Flash fired, compulsory flash mode, red-eye reduction mode, return light not detected\",\n            0x004F: \"Flash fired, compulsory flash mode, red-eye reduction mode, return light detected\",\n            0x0059: \"Flash fired, auto mode, red-eye reduction mode\",\n            0x005D: \"Flash fired, auto mode, return light not detected, red-eye reduction mode\",\n            0x005F: \"Flash fired, auto mode, return light detected, red-eye reduction mode\"\n        },\n        SensingMethod: {\n            1: \"Not defined\",\n            2: \"One-chip color area sensor\",\n            3: \"Two-chip color area sensor\",\n            4: \"Three-chip color area sensor\",\n            5: \"Color sequential area sensor\",\n            7: \"Trilinear sensor\",\n            8: \"Color sequential linear sensor\"\n        },\n        SceneCaptureType: {\n            0: \"Standard\",\n            1: \"Landscape\",\n            2: \"Portrait\",\n            3: \"Night scene\"\n        },\n        SceneType: {\n            1: \"Directly photographed\"\n        },\n        CustomRendered: {\n            0: \"Normal process\",\n            1: \"Custom process\"\n        },\n        WhiteBalance: {\n            0: \"Auto white balance\",\n            1: \"Manual white balance\"\n        },\n        GainControl: {\n            0: \"None\",\n            1: \"Low gain up\",\n            2: \"High gain up\",\n            3: \"Low gain down\",\n            4: \"High gain down\"\n        },\n        Contrast: {\n            0: \"Normal\",\n            1: \"Soft\",\n            2: \"Hard\"\n        },\n        Saturation: {\n            0: \"Normal\",\n            1: \"Low saturation\",\n            2: \"High saturation\"\n        },\n        Sharpness: {\n            0: \"Normal\",\n            1: \"Soft\",\n            2: \"Hard\"\n        },\n        SubjectDistanceRange: {\n            0: \"Unknown\",\n            1: \"Macro\",\n            2: \"Close view\",\n            3: \"Distant view\"\n        },\n        FileSource: {\n            3: \"DSC\"\n        },\n\n        Components: {\n            0: \"\",\n            1: \"Y\",\n            2: \"Cb\",\n            3: \"Cr\",\n            4: \"R\",\n            5: \"G\",\n            6: \"B\"\n        }\n    };\n\n    function addEvent(element, event, handler) {\n        if (element.addEventListener) {\n            element.addEventListener(event, handler, false);\n        } else if (element.attachEvent) {\n            element.attachEvent(\"on\" + event, handler);\n        }\n    }\n\n    function imageHasData(img) {\n        return !!img.exifdata;\n    }\n\n    function base64ToArrayBuffer(base64, contentType) {\n        contentType = contentType || base64.match(/^data\\:([^\\;]+)\\;base64,/mi)[1] || '';\n        base64 = base64.replace(/^data\\:([^\\;]+)\\;base64,/gmi, '');\n        var binary = atob(base64);\n        var len = binary.length;\n        var buffer = new ArrayBuffer(len);\n        var view = new Uint8Array(buffer);\n        for (var i = 0; i < len; i++) {\n            view[i] = binary.charCodeAt(i);\n        }\n        return buffer;\n    }\n\n    function objectURLToBlob(url, callback) {\n        var http = new XMLHttpRequest();\n        http.open(\"GET\", url, true);\n        http.responseType = \"blob\";\n        http.onload = function (e) {\n            if (this.status == 200 || this.status === 0) {\n                callback(this.response);\n            }\n        };\n        http.send();\n    }\n\n    function getImageData(img, callback) {\n        function handleBinaryFile(binFile) {\n            var data = findEXIFinJPEG(binFile);\n            var iptcdata = findIPTCinJPEG(binFile);\n            var xmpdata = findXMPinJPEG(binFile);\n            img.exifdata = data || {};\n            img.iptcdata = iptcdata || {};\n            img.xmpdata = xmpdata || {};\n            if (callback) {\n                callback.call(img);\n            }\n        }\n\n        if (img.src) {\n            if (/^data\\:/i.test(img.src)) {\n                var arrayBuffer = base64ToArrayBuffer(img.src);\n                handleBinaryFile(arrayBuffer);\n            } else if (/^blob\\:/i.test(img.src)) {\n                var fileReader = new FileReader();\n                fileReader.onload = function (e) {\n                    handleBinaryFile(e.target.result);\n                };\n                objectURLToBlob(img.src, function (blob) {\n                    fileReader.readAsArrayBuffer(blob);\n                });\n            } else {\n                var http = new XMLHttpRequest();\n                http.onload = function () {\n                    if (this.status == 200 || this.status === 0) {\n                        handleBinaryFile(http.response);\n                    } else {\n                        throw \"Could not load image\";\n                    }\n                    http = null;\n                };\n                http.open(\"GET\", img.src, true);\n                http.responseType = \"arraybuffer\";\n                http.send(null);\n            }\n        } else if (self.FileReader && (img instanceof self.Blob || img instanceof self.File)) {\n            var fileReader = new FileReader();\n            fileReader.onload = function (e) {\n                if (debug) console.log(\"Got file of length \" + e.target.result.byteLength);\n                handleBinaryFile(e.target.result);\n            };\n\n            fileReader.readAsArrayBuffer(img);\n        }\n    }\n\n    function findEXIFinJPEG(file) {\n        var dataView = new DataView(file);\n\n        if (debug) console.log(\"Got file of length \" + file.byteLength);\n        if (dataView.getUint8(0) != 0xFF || dataView.getUint8(1) != 0xD8) {\n            if (debug) console.log(\"Not a valid JPEG\");\n            return false;\n        }\n\n        var offset = 2,\n            length = file.byteLength,\n            marker;\n\n        while (offset < length) {\n            if (dataView.getUint8(offset) != 0xFF) {\n                if (debug) console.log(\"Not a valid marker at offset \" + offset + \", found: \" + dataView.getUint8(offset));\n                return false;\n            }\n\n            marker = dataView.getUint8(offset + 1);\n            if (debug) console.log(marker);\n\n            if (marker == 225) {\n                if (debug) console.log(\"Found 0xFFE1 marker\");\n\n                return readEXIFData(dataView, offset + 4, dataView.getUint16(offset + 2) - 2);\n            } else {\n                offset += 2 + dataView.getUint16(offset + 2);\n            }\n        }\n    }\n\n    function findIPTCinJPEG(file) {\n        var dataView = new DataView(file);\n\n        if (debug) console.log(\"Got file of length \" + file.byteLength);\n        if (dataView.getUint8(0) != 0xFF || dataView.getUint8(1) != 0xD8) {\n            if (debug) console.log(\"Not a valid JPEG\");\n            return false;\n        }\n\n        var offset = 2,\n            length = file.byteLength;\n\n        var isFieldSegmentStart = function isFieldSegmentStart(dataView, offset) {\n            return dataView.getUint8(offset) === 0x38 && dataView.getUint8(offset + 1) === 0x42 && dataView.getUint8(offset + 2) === 0x49 && dataView.getUint8(offset + 3) === 0x4D && dataView.getUint8(offset + 4) === 0x04 && dataView.getUint8(offset + 5) === 0x04;\n        };\n\n        while (offset < length) {\n\n            if (isFieldSegmentStart(dataView, offset)) {\n                var nameHeaderLength = dataView.getUint8(offset + 7);\n                if (nameHeaderLength % 2 !== 0) nameHeaderLength += 1;\n\n                if (nameHeaderLength === 0) {\n                    nameHeaderLength = 4;\n                }\n\n                var startOffset = offset + 8 + nameHeaderLength;\n                var sectionLength = dataView.getUint16(offset + 6 + nameHeaderLength);\n\n                return readIPTCData(file, startOffset, sectionLength);\n\n                break;\n            }\n\n            offset++;\n        }\n    }\n    var IptcFieldMap = {\n        0x78: 'caption',\n        0x6E: 'credit',\n        0x19: 'keywords',\n        0x37: 'dateCreated',\n        0x50: 'byline',\n        0x55: 'bylineTitle',\n        0x7A: 'captionWriter',\n        0x69: 'headline',\n        0x74: 'copyright',\n        0x0F: 'category'\n    };\n    function readIPTCData(file, startOffset, sectionLength) {\n        var dataView = new DataView(file);\n        var data = {};\n        var fieldValue, fieldName, dataSize, segmentType, segmentSize;\n        var segmentStartPos = startOffset;\n        while (segmentStartPos < startOffset + sectionLength) {\n            if (dataView.getUint8(segmentStartPos) === 0x1C && dataView.getUint8(segmentStartPos + 1) === 0x02) {\n                segmentType = dataView.getUint8(segmentStartPos + 2);\n                if (segmentType in IptcFieldMap) {\n                    dataSize = dataView.getInt16(segmentStartPos + 3);\n                    segmentSize = dataSize + 5;\n                    fieldName = IptcFieldMap[segmentType];\n                    fieldValue = getStringFromDB(dataView, segmentStartPos + 5, dataSize);\n\n                    if (data.hasOwnProperty(fieldName)) {\n                        if (data[fieldName] instanceof Array) {\n                            data[fieldName].push(fieldValue);\n                        } else {\n                            data[fieldName] = [data[fieldName], fieldValue];\n                        }\n                    } else {\n                        data[fieldName] = fieldValue;\n                    }\n                }\n            }\n            segmentStartPos++;\n        }\n        return data;\n    }\n\n    function readTags(file, tiffStart, dirStart, strings, bigEnd) {\n        var entries = file.getUint16(dirStart, !bigEnd),\n            tags = {},\n            entryOffset,\n            tag,\n            i;\n\n        for (i = 0; i < entries; i++) {\n            entryOffset = dirStart + i * 12 + 2;\n            tag = strings[file.getUint16(entryOffset, !bigEnd)];\n            if (!tag && debug) console.log(\"Unknown tag: \" + file.getUint16(entryOffset, !bigEnd));\n            tags[tag] = readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd);\n        }\n        return tags;\n    }\n\n    function readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd) {\n        var type = file.getUint16(entryOffset + 2, !bigEnd),\n            numValues = file.getUint32(entryOffset + 4, !bigEnd),\n            valueOffset = file.getUint32(entryOffset + 8, !bigEnd) + tiffStart,\n            offset,\n            vals,\n            val,\n            n,\n            numerator,\n            denominator;\n\n        switch (type) {\n            case 1:\n            case 7:\n                if (numValues == 1) {\n                    return file.getUint8(entryOffset + 8, !bigEnd);\n                } else {\n                    offset = numValues > 4 ? valueOffset : entryOffset + 8;\n                    vals = [];\n                    for (n = 0; n < numValues; n++) {\n                        vals[n] = file.getUint8(offset + n);\n                    }\n                    return vals;\n                }\n\n            case 2:\n                offset = numValues > 4 ? valueOffset : entryOffset + 8;\n                return getStringFromDB(file, offset, numValues - 1);\n\n            case 3:\n                if (numValues == 1) {\n                    return file.getUint16(entryOffset + 8, !bigEnd);\n                } else {\n                    offset = numValues > 2 ? valueOffset : entryOffset + 8;\n                    vals = [];\n                    for (n = 0; n < numValues; n++) {\n                        vals[n] = file.getUint16(offset + 2 * n, !bigEnd);\n                    }\n                    return vals;\n                }\n\n            case 4:\n                if (numValues == 1) {\n                    return file.getUint32(entryOffset + 8, !bigEnd);\n                } else {\n                    vals = [];\n                    for (n = 0; n < numValues; n++) {\n                        vals[n] = file.getUint32(valueOffset + 4 * n, !bigEnd);\n                    }\n                    return vals;\n                }\n\n            case 5:\n                if (numValues == 1) {\n                    numerator = file.getUint32(valueOffset, !bigEnd);\n                    denominator = file.getUint32(valueOffset + 4, !bigEnd);\n                    val = new Number(numerator / denominator);\n                    val.numerator = numerator;\n                    val.denominator = denominator;\n                    return val;\n                } else {\n                    vals = [];\n                    for (n = 0; n < numValues; n++) {\n                        numerator = file.getUint32(valueOffset + 8 * n, !bigEnd);\n                        denominator = file.getUint32(valueOffset + 4 + 8 * n, !bigEnd);\n                        vals[n] = new Number(numerator / denominator);\n                        vals[n].numerator = numerator;\n                        vals[n].denominator = denominator;\n                    }\n                    return vals;\n                }\n\n            case 9:\n                if (numValues == 1) {\n                    return file.getInt32(entryOffset + 8, !bigEnd);\n                } else {\n                    vals = [];\n                    for (n = 0; n < numValues; n++) {\n                        vals[n] = file.getInt32(valueOffset + 4 * n, !bigEnd);\n                    }\n                    return vals;\n                }\n\n            case 10:\n                if (numValues == 1) {\n                    return file.getInt32(valueOffset, !bigEnd) / file.getInt32(valueOffset + 4, !bigEnd);\n                } else {\n                    vals = [];\n                    for (n = 0; n < numValues; n++) {\n                        vals[n] = file.getInt32(valueOffset + 8 * n, !bigEnd) / file.getInt32(valueOffset + 4 + 8 * n, !bigEnd);\n                    }\n                    return vals;\n                }\n        }\n    }\n\n    function getNextIFDOffset(dataView, dirStart, bigEnd) {\n        var entries = dataView.getUint16(dirStart, !bigEnd);\n\n        return dataView.getUint32(dirStart + 2 + entries * 12, !bigEnd);\n    }\n\n    function readThumbnailImage(dataView, tiffStart, firstIFDOffset, bigEnd) {\n        var IFD1OffsetPointer = getNextIFDOffset(dataView, tiffStart + firstIFDOffset, bigEnd);\n\n        if (!IFD1OffsetPointer) {\n            return {};\n        } else if (IFD1OffsetPointer > dataView.byteLength) {\n            return {};\n        }\n\n\n        var thumbTags = readTags(dataView, tiffStart, tiffStart + IFD1OffsetPointer, IFD1Tags, bigEnd);\n\n        if (thumbTags['Compression']) {\n\n            switch (thumbTags['Compression']) {\n                case 6:\n                    if (thumbTags.JpegIFOffset && thumbTags.JpegIFByteCount) {\n                        var tOffset = tiffStart + thumbTags.JpegIFOffset;\n                        var tLength = thumbTags.JpegIFByteCount;\n                        thumbTags['blob'] = new Blob([new Uint8Array(dataView.buffer, tOffset, tLength)], {\n                            type: 'image/jpeg'\n                        });\n                    }\n                    break;\n\n                case 1:\n                    console.log(\"Thumbnail image format is TIFF, which is not implemented.\");\n                    break;\n                default:\n                    console.log(\"Unknown thumbnail image format '%s'\", thumbTags['Compression']);\n            }\n        } else if (thumbTags['PhotometricInterpretation'] == 2) {\n            console.log(\"Thumbnail image format is RGB, which is not implemented.\");\n        }\n        return thumbTags;\n    }\n\n    function getStringFromDB(buffer, start, length) {\n        var outstr = \"\";\n        for (var n = start; n < start + length; n++) {\n            outstr += String.fromCharCode(buffer.getUint8(n));\n        }\n        return outstr;\n    }\n\n    function readEXIFData(file, start) {\n        if (getStringFromDB(file, start, 4) != \"Exif\") {\n            if (debug) console.log(\"Not valid EXIF data! \" + getStringFromDB(file, start, 4));\n            return false;\n        }\n\n        var bigEnd,\n            tags,\n            tag,\n            exifData,\n            gpsData,\n            tiffOffset = start + 6;\n\n        if (file.getUint16(tiffOffset) == 0x4949) {\n            bigEnd = false;\n        } else if (file.getUint16(tiffOffset) == 0x4D4D) {\n            bigEnd = true;\n        } else {\n            if (debug) console.log(\"Not valid TIFF data! (no 0x4949 or 0x4D4D)\");\n            return false;\n        }\n\n        if (file.getUint16(tiffOffset + 2, !bigEnd) != 0x002A) {\n            if (debug) console.log(\"Not valid TIFF data! (no 0x002A)\");\n            return false;\n        }\n\n        var firstIFDOffset = file.getUint32(tiffOffset + 4, !bigEnd);\n\n        if (firstIFDOffset < 0x00000008) {\n            if (debug) console.log(\"Not valid TIFF data! (First offset less than 8)\", file.getUint32(tiffOffset + 4, !bigEnd));\n            return false;\n        }\n\n        tags = readTags(file, tiffOffset, tiffOffset + firstIFDOffset, TiffTags, bigEnd);\n\n        if (tags.ExifIFDPointer) {\n            exifData = readTags(file, tiffOffset, tiffOffset + tags.ExifIFDPointer, ExifTags, bigEnd);\n            for (tag in exifData) {\n                switch (tag) {\n                    case \"LightSource\":\n                    case \"Flash\":\n                    case \"MeteringMode\":\n                    case \"ExposureProgram\":\n                    case \"SensingMethod\":\n                    case \"SceneCaptureType\":\n                    case \"SceneType\":\n                    case \"CustomRendered\":\n                    case \"WhiteBalance\":\n                    case \"GainControl\":\n                    case \"Contrast\":\n                    case \"Saturation\":\n                    case \"Sharpness\":\n                    case \"SubjectDistanceRange\":\n                    case \"FileSource\":\n                        exifData[tag] = StringValues[tag][exifData[tag]];\n                        break;\n\n                    case \"ExifVersion\":\n                    case \"FlashpixVersion\":\n                        exifData[tag] = String.fromCharCode(exifData[tag][0], exifData[tag][1], exifData[tag][2], exifData[tag][3]);\n                        break;\n\n                    case \"ComponentsConfiguration\":\n                        exifData[tag] = StringValues.Components[exifData[tag][0]] + StringValues.Components[exifData[tag][1]] + StringValues.Components[exifData[tag][2]] + StringValues.Components[exifData[tag][3]];\n                        break;\n                }\n                tags[tag] = exifData[tag];\n            }\n        }\n\n        if (tags.GPSInfoIFDPointer) {\n            gpsData = readTags(file, tiffOffset, tiffOffset + tags.GPSInfoIFDPointer, GPSTags, bigEnd);\n            for (tag in gpsData) {\n                switch (tag) {\n                    case \"GPSVersionID\":\n                        gpsData[tag] = gpsData[tag][0] + \".\" + gpsData[tag][1] + \".\" + gpsData[tag][2] + \".\" + gpsData[tag][3];\n                        break;\n                }\n                tags[tag] = gpsData[tag];\n            }\n        }\n\n        tags['thumbnail'] = readThumbnailImage(file, tiffOffset, firstIFDOffset, bigEnd);\n\n        return tags;\n    }\n\n    function findXMPinJPEG(file) {\n\n        if (!('DOMParser' in self)) {\n            return;\n        }\n        var dataView = new DataView(file);\n\n        if (debug) console.log(\"Got file of length \" + file.byteLength);\n        if (dataView.getUint8(0) != 0xFF || dataView.getUint8(1) != 0xD8) {\n            if (debug) console.log(\"Not a valid JPEG\");\n            return false;\n        }\n\n        var offset = 2,\n            length = file.byteLength,\n            dom = new DOMParser();\n\n        while (offset < length - 4) {\n            if (getStringFromDB(dataView, offset, 4) == \"http\") {\n                var startOffset = offset - 1;\n                var sectionLength = dataView.getUint16(offset - 2) - 1;\n                var xmpString = getStringFromDB(dataView, startOffset, sectionLength);\n                var xmpEndIndex = xmpString.indexOf('xmpmeta>') + 8;\n                xmpString = xmpString.substring(xmpString.indexOf('<x:xmpmeta'), xmpEndIndex);\n\n                var indexOfXmp = xmpString.indexOf('x:xmpmeta') + 10;\n\n                xmpString = xmpString.slice(0, indexOfXmp) + 'xmlns:Iptc4xmpCore=\"http://iptc.org/std/Iptc4xmpCore/1.0/xmlns/\" ' + 'xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" ' + 'xmlns:tiff=\"http://ns.adobe.com/tiff/1.0/\" ' + 'xmlns:plus=\"http://schemas.android.com/apk/lib/com.google.android.gms.plus\" ' + 'xmlns:ext=\"http://www.gettyimages.com/xsltExtension/1.0\" ' + 'xmlns:exif=\"http://ns.adobe.com/exif/1.0/\" ' + 'xmlns:stEvt=\"http://ns.adobe.com/xap/1.0/sType/ResourceEvent#\" ' + 'xmlns:stRef=\"http://ns.adobe.com/xap/1.0/sType/ResourceRef#\" ' + 'xmlns:crs=\"http://ns.adobe.com/camera-raw-settings/1.0/\" ' + 'xmlns:xapGImg=\"http://ns.adobe.com/xap/1.0/g/img/\" ' + 'xmlns:Iptc4xmpExt=\"http://iptc.org/std/Iptc4xmpExt/2008-02-29/\" ' + xmpString.slice(indexOfXmp);\n\n                var domDocument = dom.parseFromString(xmpString, 'text/xml');\n                return xml2Object(domDocument);\n            } else {\n                offset++;\n            }\n        }\n    }\n\n    function xml2Object(xml) {\n        try {\n            var obj = {};\n            if (xml.children.length > 0) {\n                for (var i = 0; i < xml.children.length; i++) {\n                    var item = xml.children.item(i);\n                    var attributes = item.attributes;\n                    for (var idx in attributes) {\n                        var itemAtt = attributes[idx];\n                        var dataKey = itemAtt.nodeName;\n                        var dataValue = itemAtt.nodeValue;\n\n                        if (dataKey !== undefined) {\n                            obj[dataKey] = dataValue;\n                        }\n                    }\n                    var nodeName = item.nodeName;\n\n                    if (typeof obj[nodeName] == \"undefined\") {\n                        obj[nodeName] = xml2json(item);\n                    } else {\n                        if (typeof obj[nodeName].push == \"undefined\") {\n                            var old = obj[nodeName];\n\n                            obj[nodeName] = [];\n                            obj[nodeName].push(old);\n                        }\n                        obj[nodeName].push(xml2json(item));\n                    }\n                }\n            } else {\n                obj = xml.textContent;\n            }\n            return obj;\n        } catch (e) {\n            console.log(e.message);\n        }\n    }\n\n    function xml2json(xmlobj) {\n        return (0, _stringify2.default)(xmlobj);\n    }\n\n\n    EXIF.getData = function (img, callback) {\n        if (self.Image && img instanceof self.Image || self.HTMLImageElement && img instanceof self.HTMLImageElement && !img.complete) return false;\n\n        if (!imageHasData(img)) {\n            getImageData(img, callback);\n        } else {\n            if (callback) {\n                callback.call(img);\n            }\n        }\n        return true;\n    };\n\n    EXIF.getTag = function (img, tag) {\n        if (!imageHasData(img)) return;\n        return img.exifdata[tag];\n    };\n\n    EXIF.getIptcTag = function (img, tag) {\n        if (!imageHasData(img)) return;\n        return img.iptcdata[tag];\n    };\n\n    EXIF.getAllTags = function (img) {\n        if (!imageHasData(img)) return {};\n        var a,\n            data = img.exifdata,\n            tags = {};\n        for (a in data) {\n            if (data.hasOwnProperty(a)) {\n                tags[a] = data[a];\n            }\n        }\n        return tags;\n    };\n\n    EXIF.getAllIptcTags = function (img) {\n        if (!imageHasData(img)) return {};\n        var a,\n            data = img.iptcdata,\n            tags = {};\n        for (a in data) {\n            if (data.hasOwnProperty(a)) {\n                tags[a] = data[a];\n            }\n        }\n        return tags;\n    };\n\n    EXIF.pretty = function (img) {\n        if (!imageHasData(img)) return \"\";\n        var a,\n            data = img.exifdata,\n            strPretty = \"\";\n        for (a in data) {\n            if (data.hasOwnProperty(a)) {\n                if ((0, _typeof3.default)(data[a]) == \"object\") {\n                    if (data[a] instanceof Number) {\n                        strPretty += a + \" : \" + data[a] + \" [\" + data[a].numerator + \"/\" + data[a].denominator + \"]\\r\\n\";\n                    } else {\n                        strPretty += a + \" : [\" + data[a].length + \" values]\\r\\n\";\n                    }\n                } else {\n                    strPretty += a + \" : \" + data[a] + \"\\r\\n\";\n                }\n            }\n        }\n        return strPretty;\n    };\n\n    EXIF.readFromBinaryFile = function (file) {\n        return findEXIFinJPEG(file);\n    };\n\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n            return EXIF;\n        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    }\n}).call(undefined);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///607\n");

/***/ }),

/***/ 608:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\nvar _typeof2 = __webpack_require__(31);\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(function () {\n  function detectSubsampling(img) {\n    var iw = img.naturalWidth,\n        ih = img.naturalHeight;\n    if (iw * ih > 1024 * 1024) {\n      var canvas = document.createElement('canvas');\n      canvas.width = canvas.height = 1;\n      var ctx = canvas.getContext('2d');\n      ctx.drawImage(img, -iw + 1, 0);\n\n      return ctx.getImageData(0, 0, 1, 1).data[3] === 0;\n    } else {\n      return false;\n    }\n  }\n\n  function detectVerticalSquash(img, iw, ih) {\n    var canvas = document.createElement('canvas');\n    canvas.width = 1;\n    canvas.height = ih;\n    var ctx = canvas.getContext('2d');\n    ctx.drawImage(img, 0, 0);\n    var data = ctx.getImageData(0, 0, 1, ih).data;\n\n    var sy = 0;\n    var ey = ih;\n    var py = ih;\n    while (py > sy) {\n      var alpha = data[(py - 1) * 4 + 3];\n      if (alpha === 0) {\n        ey = py;\n      } else {\n        sy = py;\n      }\n      py = ey + sy >> 1;\n    }\n    var ratio = py / ih;\n    return ratio === 0 ? 1 : ratio;\n  }\n\n  function renderImageToBlob(img, options, doSquash, callback) {\n    var canvas = document.createElement('canvas');\n    renderImageToCanvas(img, canvas, options, doSquash);\n    var dataurl = canvas.toDataURL(\"image/jpeg\", options.quality || 0.8);\n\n    var blob = dataURLtoBlob(dataurl);\n    if (callback) callback(blob, dataurl);\n  }\n\n  function dataURLtoBlob(dataurl) {\n    var arr = dataurl.split(','),\n        mime = arr[0].match(/:(.*?);/)[1],\n        bstr = atob(arr[1]),\n        n = bstr.length,\n        u8arr = new Uint8Array(n);\n    while (n--) {\n      u8arr[n] = bstr.charCodeAt(n);\n    }\n    return new Blob([u8arr], { type: mime });\n  }\n\n  function renderImageToDataURL(img, options, doSquash) {\n    var canvas = document.createElement('canvas');\n    renderImageToCanvas(img, canvas, options, doSquash);\n    return canvas.toDataURL(\"image/jpeg\", options.quality || 0.8);\n  }\n\n  function renderImageToCanvas(img, canvas, options, doSquash) {\n    var iw = img.naturalWidth,\n        ih = img.naturalHeight;\n    if (!(iw + ih)) return;\n    var width = options.width,\n        height = options.height;\n    var ctx = canvas.getContext('2d');\n    ctx.save();\n    transformCoordinate(canvas, ctx, width, height, options.orientation);\n    var subsampled = detectSubsampling(img);\n    if (subsampled) {\n      iw /= 2;\n      ih /= 2;\n    }\n    var d = 1024;\n    var tmpCanvas = document.createElement('canvas');\n    tmpCanvas.width = tmpCanvas.height = d;\n    var tmpCtx = tmpCanvas.getContext('2d');\n    var vertSquashRatio = doSquash ? detectVerticalSquash(img, iw, ih) : 1;\n    var dw = Math.ceil(d * width / iw);\n    var dh = Math.ceil(d * height / ih / vertSquashRatio);\n    var sy = 0;\n    var dy = 0;\n    while (sy < ih) {\n      var sx = 0;\n      var dx = 0;\n      while (sx < iw) {\n        tmpCtx.clearRect(0, 0, d, d);\n        tmpCtx.drawImage(img, -sx, -sy);\n        ctx.drawImage(tmpCanvas, 0, 0, d, d, dx, dy, dw, dh);\n        sx += d;\n        dx += dw;\n      }\n      sy += d;\n      dy += dh;\n    }\n    ctx.restore();\n    tmpCanvas = tmpCtx = null;\n  }\n\n  function transformCoordinate(canvas, ctx, width, height, orientation) {\n    switch (orientation) {\n      case 5:\n      case 6:\n      case 7:\n      case 8:\n        canvas.width = height;\n        canvas.height = width;\n        break;\n      default:\n        canvas.width = width;\n        canvas.height = height;\n    }\n    switch (orientation) {\n      case 2:\n        ctx.translate(width, 0);\n        ctx.scale(-1, 1);\n        break;\n      case 3:\n        ctx.translate(width, height);\n        ctx.rotate(Math.PI);\n        break;\n      case 4:\n        ctx.translate(0, height);\n        ctx.scale(1, -1);\n        break;\n      case 5:\n        ctx.rotate(0.5 * Math.PI);\n        ctx.scale(1, -1);\n        break;\n      case 6:\n        ctx.rotate(0.5 * Math.PI);\n        ctx.translate(0, -height);\n        break;\n      case 7:\n        ctx.rotate(0.5 * Math.PI);\n        ctx.translate(width, -height);\n        ctx.scale(-1, 1);\n        break;\n      case 8:\n        ctx.rotate(-0.5 * Math.PI);\n        ctx.translate(-width, 0);\n        break;\n      default:\n        break;\n    }\n  }\n\n  var URL = window.URL && window.URL.createObjectURL ? window.URL : window.webkitURL && window.webkitURL.createObjectURL ? window.webkitURL : null;\n\n  function MegaPixImage(srcImage) {\n    if (window.Blob && srcImage instanceof Blob) {\n      if (!URL) {\n        throw Error(\"No createObjectURL function found to create blob url\");\n      }\n      var img = new Image();\n      img.src = URL.createObjectURL(srcImage);\n      this.blob = srcImage;\n      srcImage = img;\n    }\n    if (!srcImage.naturalWidth && !srcImage.naturalHeight) {\n      var _this = this;\n      srcImage.onload = srcImage.onerror = function () {\n        var listeners = _this.imageLoadListeners;\n        if (listeners) {\n          _this.imageLoadListeners = null;\n          for (var i = 0, len = listeners.length; i < len; i++) {\n            listeners[i]();\n          }\n        }\n      };\n      this.imageLoadListeners = [];\n    }\n    this.srcImage = srcImage;\n  }\n\n  MegaPixImage.prototype.render = function (target, options, callback, blobcallback) {\n    if (this.imageLoadListeners) {\n      var _this = this;\n      this.imageLoadListeners.push(function () {\n        _this.render(target, options, callback, blobcallback);\n      });\n      return;\n    }\n    options = options || {};\n    var imgWidth = this.srcImage.naturalWidth,\n        imgHeight = this.srcImage.naturalHeight,\n        width = options.width,\n        height = options.height,\n        maxWidth = options.maxWidth,\n        maxHeight = options.maxHeight,\n        doSquash = !this.blob || this.blob.type === 'image/jpeg';\n    if (width && !height) {\n      height = imgHeight * width / imgWidth << 0;\n    } else if (height && !width) {\n      width = imgWidth * height / imgHeight << 0;\n    } else {\n      width = imgWidth;\n      height = imgHeight;\n    }\n    if (maxWidth && width > maxWidth) {\n      width = maxWidth;\n      height = imgHeight * width / imgWidth << 0;\n    }\n    if (maxHeight && height > maxHeight) {\n      height = maxHeight;\n      width = imgWidth * height / imgHeight << 0;\n    }\n    var opt = { width: width, height: height };\n    for (var k in options) {\n      opt[k] = options[k];\n    }\n    if (target == null) {\n      renderImageToBlob(this.srcImage, opt, doSquash, blobcallback);\n    } else {\n      var tagName = target.tagName.toLowerCase();\n      if (tagName === 'img') {\n        target.src = renderImageToDataURL(this.srcImage, opt, doSquash);\n      } else if (tagName === 'canvas') {\n        renderImageToCanvas(this.srcImage, target, opt, doSquash);\n      }\n    }\n\n\n    if (typeof this.onrender === 'function') {\n      this.onrender(target);\n    }\n    if (callback) {\n      callback();\n    }\n    if (this.blob) {\n      this.blob = null;\n      URL.revokeObjectURL(this.srcImage.src);\n    }\n  };\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n      return MegaPixImage;\n    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else if ((typeof exports === 'undefined' ? 'undefined' : (0, _typeof3.default)(exports)) === 'object') {\n    module.exports = MegaPixImage;\n  } else {\n    this.MegaPixImage = MegaPixImage;\n  }\n})();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbC9pbWFnZS1tZWdhcGl4LmpzP2EyNWUiXSwibmFtZXMiOlsiZGV0ZWN0U3Vic2FtcGxpbmciLCJpbWciLCJpdyIsIm5hdHVyYWxXaWR0aCIsImloIiwibmF0dXJhbEhlaWdodCIsImNhbnZhcyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsIndpZHRoIiwiaGVpZ2h0IiwiY3R4IiwiZ2V0Q29udGV4dCIsImRyYXdJbWFnZSIsImdldEltYWdlRGF0YSIsImRhdGEiLCJkZXRlY3RWZXJ0aWNhbFNxdWFzaCIsInN5IiwiZXkiLCJweSIsImFscGhhIiwicmF0aW8iLCJyZW5kZXJJbWFnZVRvQmxvYiIsIm9wdGlvbnMiLCJkb1NxdWFzaCIsImNhbGxiYWNrIiwicmVuZGVySW1hZ2VUb0NhbnZhcyIsImRhdGF1cmwiLCJ0b0RhdGFVUkwiLCJxdWFsaXR5IiwiYmxvYiIsImRhdGFVUkx0b0Jsb2IiLCJhcnIiLCJzcGxpdCIsIm1pbWUiLCJtYXRjaCIsImJzdHIiLCJhdG9iIiwibiIsImxlbmd0aCIsInU4YXJyIiwiVWludDhBcnJheSIsImNoYXJDb2RlQXQiLCJCbG9iIiwidHlwZSIsInJlbmRlckltYWdlVG9EYXRhVVJMIiwic2F2ZSIsInRyYW5zZm9ybUNvb3JkaW5hdGUiLCJvcmllbnRhdGlvbiIsInN1YnNhbXBsZWQiLCJkIiwidG1wQ2FudmFzIiwidG1wQ3R4IiwidmVydFNxdWFzaFJhdGlvIiwiZHciLCJNYXRoIiwiY2VpbCIsImRoIiwiZHkiLCJzeCIsImR4IiwiY2xlYXJSZWN0IiwicmVzdG9yZSIsInRyYW5zbGF0ZSIsInNjYWxlIiwicm90YXRlIiwiUEkiLCJVUkwiLCJ3aW5kb3ciLCJjcmVhdGVPYmplY3RVUkwiLCJ3ZWJraXRVUkwiLCJNZWdhUGl4SW1hZ2UiLCJzcmNJbWFnZSIsIkVycm9yIiwiSW1hZ2UiLCJzcmMiLCJfdGhpcyIsIm9ubG9hZCIsIm9uZXJyb3IiLCJsaXN0ZW5lcnMiLCJpbWFnZUxvYWRMaXN0ZW5lcnMiLCJpIiwibGVuIiwicHJvdG90eXBlIiwicmVuZGVyIiwidGFyZ2V0IiwiYmxvYmNhbGxiYWNrIiwicHVzaCIsImltZ1dpZHRoIiwiaW1nSGVpZ2h0IiwibWF4V2lkdGgiLCJtYXhIZWlnaHQiLCJvcHQiLCJrIiwidGFnTmFtZSIsInRvTG93ZXJDYXNlIiwib25yZW5kZXIiLCJyZXZva2VPYmplY3RVUkwiLCJkZWZpbmUiLCJleHBvcnRzIiwibW9kdWxlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQVlBLENBQUMsWUFBVztBQU1WLFdBQVNBLGlCQUFULENBQTJCQyxHQUEzQixFQUFnQztBQUM5QixRQUFJQyxLQUFLRCxJQUFJRSxZQUFiO0FBQUEsUUFBMkJDLEtBQUtILElBQUlJLGFBQXBDO0FBQ0EsUUFBSUgsS0FBS0UsRUFBTCxHQUFVLE9BQU8sSUFBckIsRUFBMkI7QUFDekIsVUFBSUUsU0FBU0MsU0FBU0MsYUFBVCxDQUF1QixRQUF2QixDQUFiO0FBQ0FGLGFBQU9HLEtBQVAsR0FBZUgsT0FBT0ksTUFBUCxHQUFnQixDQUEvQjtBQUNBLFVBQUlDLE1BQU1MLE9BQU9NLFVBQVAsQ0FBa0IsSUFBbEIsQ0FBVjtBQUNBRCxVQUFJRSxTQUFKLENBQWNaLEdBQWQsRUFBbUIsQ0FBQ0MsRUFBRCxHQUFNLENBQXpCLEVBQTRCLENBQTVCOztBQUlBLGFBQU9TLElBQUlHLFlBQUosQ0FBaUIsQ0FBakIsRUFBb0IsQ0FBcEIsRUFBdUIsQ0FBdkIsRUFBMEIsQ0FBMUIsRUFBNkJDLElBQTdCLENBQWtDLENBQWxDLE1BQXlDLENBQWhEO0FBQ0QsS0FURCxNQVNPO0FBQ0wsYUFBTyxLQUFQO0FBQ0Q7QUFDRjs7QUFNRCxXQUFTQyxvQkFBVCxDQUE4QmYsR0FBOUIsRUFBbUNDLEVBQW5DLEVBQXVDRSxFQUF2QyxFQUEyQztBQUN6QyxRQUFJRSxTQUFTQyxTQUFTQyxhQUFULENBQXVCLFFBQXZCLENBQWI7QUFDQUYsV0FBT0csS0FBUCxHQUFlLENBQWY7QUFDQUgsV0FBT0ksTUFBUCxHQUFnQk4sRUFB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QUFQLENBQWVDLFdBQWYsRUFBZDtBQUNBLFVBQUlELFlBQVksS0FBaEIsRUFBdUI7QUFDbkJULGVBQU9WLEdBQVAsR0FBYTlCLHFCQUFxQixLQUFLMkIsUUFBMUIsRUFBb0NvQixHQUFwQyxFQUF5Q3BFLFFBQXpDLENBQWI7QUFDSCxPQUZELE1BRU8sSUFBSXNFLFlBQVksUUFBaEIsRUFBMEI7QUFDN0JwRSw0QkFBb0IsS0FBSzhDLFFBQXpCLEVBQW1DYSxNQUFuQyxFQUEyQ08sR0FBM0MsRUFBZ0RwRSxRQUFoRDtBQUNIO0FBQ0o7OztBQUdELFFBQUksT0FBTyxLQUFLd0UsUUFBWixLQUF5QixVQUE3QixFQUF5QztBQUN2QyxXQUFLQSxRQUFMLENBQWNYLE1BQWQ7QUFDRDtBQUNELFFBQUk1RCxRQUFKLEVBQWM7QUFDWkE7QUFDRDtBQUNELFFBQUksS0FBS0ssSUFBVCxFQUFlO0FBQ2IsV0FBS0EsSUFBTCxHQUFZLElBQVo7QUFDQXFDLFVBQUk4QixlQUFKLENBQW9CLEtBQUt6QixRQUFMLENBQWNHLEdBQWxDO0FBQ0Q7QUFDRixHQXRERDs7QUEyREEsTUFBSSxJQUFKLEVBQWdEO0FBQzlDdUIsSUFBQSxpQ0FBTyxFQUFQLGtDQUFXLFlBQVc7QUFBRSxhQUFPM0IsWUFBUDtBQUFzQixLQUE5QztBQUFBO0FBQ0QsR0FGRCxNQUVPLElBQUksUUFBTzRCLE9BQVAsdURBQU9BLE9BQVAsT0FBbUIsUUFBdkIsRUFBaUM7QUFDdENDLFdBQU9ELE9BQVAsR0FBaUI1QixZQUFqQjtBQUNELEdBRk0sTUFFQTtBQUNMLFNBQUtBLFlBQUwsR0FBb0JBLFlBQXBCO0FBQ0Q7QUFFRixDQTVSRCIsImZpbGUiOiI2MDguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE1lZ2EgcGl4ZWwgaW1hZ2UgcmVuZGVyaW5nIGxpYnJhcnkgZm9yIGlPUzYgU2FmYXJpXG4gKlxuICogRml4ZXMgaU9TNiBTYWZhcmkncyBpbWFnZSBmaWxlIHJlbmRlcmluZyBpc3N1ZSBmb3IgbGFyZ2Ugc2l6ZSBpbWFnZSAob3ZlciBtZWdhLXBpeGVsKSxcbiAqIHdoaWNoIGNhdXNlcyB1bmV4cGVjdGVkIHN1YnNhbXBsaW5nIHdoZW4gZHJhd2luZyBpdCBpbiBjYW52YXMuXG4gKiBCeSB1c2luZyB0aGlzIGxpYnJhcnksIHlvdSBjYW4gc2FmZWx5IHJlbmRlciB0aGUgaW1hZ2Ugd2l0aCBwcm9wZXIgc3RyZXRjaGluZy5cbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTIgU2hpbmljaGkgVG9taXRhIDxzaGluaWNoaS50b21pdGFAZ21haWwuY29tPlxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL3N0b21pdGEvaW9zLWltYWdlZmlsZS1tZWdhcGl4ZWxcbiAqL1xuKGZ1bmN0aW9uKCkge1xuXG4gIC8qKlxuICAgKiBEZXRlY3Qgc3Vic2FtcGxpbmcgaW4gbG9hZGVkIGltYWdlLlxuICAgKiBJbiBpT1MsIGxhcmdlciBpbWFnZXMgdGhhbiAyTSBwaXhlbHMgbWF5IGJlIHN1YnNhbXBsZWQgaW4gcmVuZGVyaW5nLlxuICAgKi9cbiAgZnVuY3Rpb24gZGV0ZWN0U3Vic2FtcGxpbmcoaW1nKSB7XG4gICAgdmFyIGl3ID0gaW1nLm5hdHVyYWxXaWR0aCwgaWggPSBpbWcubmF0dXJhbEhlaWdodDtcbiAgICBpZiAoaXcgKiBpaCA+IDEwMjQgKiAxMDI0KSB7IC8vIHN1YnNhbXBsaW5nIG1heSBoYXBwZW4gb3ZlciBtZWdhcGl4ZWwgaW1hZ2VcbiAgICAgIHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICAgIGNhbnZhcy53aWR0aCA9IGNhbnZhcy5oZWlnaHQgPSAxO1xuICAgICAgdmFyIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgY3R4LmRyYXdJbWFnZShpbWcsIC1pdyArIDEsIDApO1xuICAgICAgLy8gc3Vic2FtcGxlZCBpbWFnZSBiZWNvbWVzIGhhbGYgc21hbGxlciBpbiByZW5kZXJpbmcgc2l6ZS5cbiAgICAgIC8vIGNoZWNrIGFscGhhIGNoYW5uZWwgdmFsdWUgdG8gY29uZmlybSBpbWFnZSBpcyBjb3ZlcmluZyBlZGdlIHBpeGVsIG9yIG5vdC5cbiAgICAgIC8vIGlmIGFscGhhIHZhbHVlIGlzIDAgaW1hZ2UgaXMgbm90IGNvdmVyaW5nLCBoZW5jZSBzdWJzYW1wbGVkLlxuICAgICAgcmV0dXJuIGN0eC5nZXRJbWFnZURhdGEoMCwgMCwgMSwgMSkuZGF0YVszXSA9PT0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlY3RpbmcgdmVydGljYWwgc3F1YXNoIGluIGxvYWRlZCBpbWFnZS5cbiAgICogRml4ZXMgYSBidWcgd2hpY2ggc3F1YXNoIGltYWdlIHZlcnRpY2FsbHkgd2hpbGUgZHJhd2luZyBpbnRvIGNhbnZhcyBmb3Igc29tZSBpbWFnZXMuXG4gICAqL1xuICBmdW5jdGlvbiBkZXRlY3RWZXJ0aWNhbFNxdWFzaChpbWcsIGl3LCBpaCkge1xuICAgIHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICBjYW52YXMud2lkdGggPSAxO1xuICAgIGNhbnZhcy5oZWlnaHQgPSBpaDtcbiAgICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgY3R4LmRyYXdJbWFnZShpbWcsIDAsIDApO1xuICAgIHZhciBkYXRhID0gY3R4LmdldEltYWdlRGF0YSgwLCAwLCAxLCBpaCkuZGF0YTtcbiAgICAvLyBzZWFyY2ggaW1hZ2UgZWRnZSBwaXhlbCBwb3NpdGlvbiBpbiBjYXNlIGl0IGlzIHNxdWFzaGVkIHZlcnRpY2FsbHkuXG4gICAgdmFyIHN5ID0gMDtcbiAgICB2YXIgZXkgPSBpaDtcbiAgICB2YXIgcHkgPSBpaDtcbiAgICB3aGlsZSAocHkgPiBzeSkge1xuICAgICAgdmFyIGFscGhhID0gZGF0YVsocHkgLSAxKSAqIDQgKyAzXTtcbiAgICAgIGlmIChhbHBoYSA9PT0gMCkge1xuICAgICAgICBleSA9IHB5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3kgPSBweTtcbiAgICAgIH1cbiAgICAgIHB5ID0gKGV5ICsgc3kpID4+IDE7XG4gICAgfVxuICAgIHZhciByYXRpbyA9IChweSAvIGloKTtcbiAgICByZXR1cm4gKHJhdGlvPT09MCk/MTpyYXRpbztcbiAgfVxuXG4gICAgLyoqXG4gICAgICogUmVuZGVyaW5nIGltYWdlIGVsZW1lbnQgKHdpdGggcmVzaXppbmcpIGFuZCBnZXQgaXRzIGJsb2IgZGF0YVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlbmRlckltYWdlVG9CbG9iKGltZywgb3B0aW9ucywgZG9TcXVhc2gsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICAgICAgcmVuZGVySW1hZ2VUb0NhbnZhcyhpbWcsIGNhbnZhcywgb3B0aW9ucywgZG9TcXVhc2gpO1xuICAgICAgICB2YXIgZGF0YXVybCA9ICBjYW52YXMudG9EYXRhVVJMKFwiaW1hZ2UvanBlZ1wiLCBvcHRpb25zLnF1YWxpdHkgfHwgMC44KTtcblxuICAgICAgICB2YXIgYmxvYiA9IGRhdGFVUkx0b0Jsb2IoZGF0YXVybCk7XG4gICAgICAgIGlmKGNhbGxiYWNrKSBjYWxsYmFjayhibG9iLCBkYXRhdXJsKTtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gY2FudmFzLnRvQmxvYihmdW5jdGlvbihibG9iKXsgaWYgKGNhbGxiYWNrKSBjYWxsYmFjayhibG9iLCBkYXRhdXJsKTsgfSwgXCJpbWFnZS9qcGVnXCIsIG9wdGlvbnMucXVhbGl0eSB8fCAwLjgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRhdGFVUkx0b0Jsb2IoZGF0YXVybCkge1xuICAgICAgICB2YXIgYXJyID0gZGF0YXVybC5zcGxpdCgnLCcpLCBtaW1lID0gYXJyWzBdLm1hdGNoKC86KC4qPyk7LylbMV0sXG4gICAgICAgICAgICBic3RyID0gYXRvYihhcnJbMV0pLCBuID0gYnN0ci5sZW5ndGgsIHU4YXJyID0gbmV3IFVpbnQ4QXJyYXkobik7XG4gICAgICAgIHdoaWxlKG4tLSl7XG4gICAgICAgICAgICB1OGFycltuXSA9IGJzdHIuY2hhckNvZGVBdChuKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEJsb2IoW3U4YXJyXSwge3R5cGU6bWltZX0pO1xuICAgIH1cbiAgICAvL0x1dGhlclxuXG4gIC8qKlxuICAgKiBSZW5kZXJpbmcgaW1hZ2UgZWxlbWVudCAod2l0aCByZXNpemluZykgYW5kIGdldCBpdHMgZGF0YSBVUkxcbiAgICovXG4gIGZ1bmN0aW9uIHJlbmRlckltYWdlVG9EYXRhVVJMKGltZywgb3B0aW9ucywgZG9TcXVhc2gpIHtcbiAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgcmVuZGVySW1hZ2VUb0NhbnZhcyhpbWcsIGNhbnZhcywgb3B0aW9ucywgZG9TcXVhc2gpO1xuICAgIHJldHVybiBjYW52YXMudG9EYXRhVVJMKFwiaW1hZ2UvanBlZ1wiLCBvcHRpb25zLnF1YWxpdHkgfHwgMC44KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW5kZXJpbmcgaW1hZ2UgZWxlbWVudCAod2l0aCByZXNpemluZykgaW50byB0aGUgY2FudmFzIGVsZW1lbnRcbiAgICovXG4gIGZ1bmN0aW9uIHJlbmRlckltYWdlVG9DYW52YXMoaW1nLCBjYW52YXMsIG9wdGlvbnMsIGRvU3F1YXNoKSB7XG4gICAgdmFyIGl3ID0gaW1nLm5hdHVyYWxXaWR0aCwgaWggPSBpbWcubmF0dXJhbEhlaWdodDtcbiAgICBpZiAoIShpdytpaCkpIHJldHVybjtcbiAgICB2YXIgd2lkdGggPSBvcHRpb25zLndpZHRoLCBoZWlnaHQgPSBvcHRpb25zLmhlaWdodDtcbiAgICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgY3R4LnNhdmUoKTtcbiAgICB0cmFuc2Zvcm1Db29yZGluYXRlKGNhbnZhcywgY3R4LCB3aWR0aCwgaGVpZ2h0LCBvcHRpb25zLm9yaWVudGF0aW9uKTtcbiAgICB2YXIgc3Vic2FtcGxlZCA9IGRldGVjdFN1YnNhbXBsaW5nKGltZyk7XG4gICAgaWYgKHN1YnNhbXBsZWQpIHtcbiAgICAgIGl3IC89IDI7XG4gICAgICBpaCAvPSAyO1xuICAgIH1cbiAgICB2YXIgZCA9IDEwMjQ7IC8vIHNpemUgb2YgdGlsaW5nIGNhbnZhc1xuICAgIHZhciB0bXBDYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICB0bXBDYW52YXMud2lkdGggPSB0bXBDYW52YXMuaGVpZ2h0ID0gZDtcbiAgICB2YXIgdG1wQ3R4ID0gdG1wQ2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgdmFyIHZlcnRTcXVhc2hSYXRpbyA9IGRvU3F1YXNoID8gZGV0ZWN0VmVydGljYWxTcXVhc2goaW1nLCBpdywgaWgpIDogMTtcbiAgICB2YXIgZHcgPSBNYXRoLmNlaWwoZCAqIHdpZHRoIC8gaXcpO1xuICAgIHZhciBkaCA9IE1hdGguY2VpbChkICogaGVpZ2h0IC8gaWggLyB2ZXJ0U3F1YXNoUmF0aW8pO1xuICAgIHZhciBzeSA9IDA7XG4gICAgdmFyIGR5ID0gMDtcbiAgICB3aGlsZSAoc3kgPCBpaCkge1xuICAgICAgdmFyIHN4ID0gMDtcbiAgICAgIHZhciBkeCA9IDA7XG4gICAgICB3aGlsZSAoc3ggPCBpdykge1xuICAgICAgICB0bXBDdHguY2xlYXJSZWN0KDAsIDAsIGQsIGQpO1xuICAgICAgICB0bXBDdHguZHJhd0ltYWdlKGltZywgLXN4LCAtc3kpO1xuICAgICAgICBjdHguZHJhd0ltYWdlKHRtcENhbnZhcywgMCwgMCwgZCwgZCwgZHgsIGR5LCBkdywgZGgpO1xuICAgICAgICBzeCArPSBkO1xuICAgICAgICBkeCArPSBkdztcbiAgICAgIH1cbiAgICAgIHN5ICs9IGQ7XG4gICAgICBkeSArPSBkaDtcbiAgICB9XG4gICAgY3R4LnJlc3RvcmUoKTtcbiAgICB0bXBDYW52YXMgPSB0bXBDdHggPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIFRyYW5zZm9ybSBjYW52YXMgY29vcmRpbmF0aW9uIGFjY29yZGluZyB0byBzcGVjaWZpZWQgZnJhbWUgc2l6ZSBhbmQgb3JpZW50YXRpb25cbiAgICogT3JpZW50YXRpb24gdmFsdWUgaXMgZnJvbSBFWElGIHRhZ1xuICAgKi9cbiAgZnVuY3Rpb24gdHJhbnNmb3JtQ29vcmRpbmF0ZShjYW52YXMsIGN0eCwgd2lkdGgsIGhlaWdodCwgb3JpZW50YXRpb24pIHtcbiAgICBzd2l0Y2ggKG9yaWVudGF0aW9uKSB7XG4gICAgICBjYXNlIDU6XG4gICAgICBjYXNlIDY6XG4gICAgICBjYXNlIDc6XG4gICAgICBjYXNlIDg6XG4gICAgICAgIGNhbnZhcy53aWR0aCA9IGhlaWdodDtcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IHdpZHRoO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGNhbnZhcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICBjYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgIH1cbiAgICBzd2l0Y2ggKG9yaWVudGF0aW9uKSB7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIC8vIGhvcml6b250YWwgZmxpcFxuICAgICAgICBjdHgudHJhbnNsYXRlKHdpZHRoLCAwKTtcbiAgICAgICAgY3R4LnNjYWxlKC0xLCAxKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIC8vIDE4MCByb3RhdGUgbGVmdFxuICAgICAgICBjdHgudHJhbnNsYXRlKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICBjdHgucm90YXRlKE1hdGguUEkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNDpcbiAgICAgICAgLy8gdmVydGljYWwgZmxpcFxuICAgICAgICBjdHgudHJhbnNsYXRlKDAsIGhlaWdodCk7XG4gICAgICAgIGN0eC5zY2FsZSgxLCAtMSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA1OlxuICAgICAgICAvLyB2ZXJ0aWNhbCBmbGlwICsgOTAgcm90YXRlIHJpZ2h0XG4gICAgICAgIGN0eC5yb3RhdGUoMC41ICogTWF0aC5QSSk7XG4gICAgICAgIGN0eC5zY2FsZSgxLCAtMSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA2OlxuICAgICAgICAvLyA5MCByb3RhdGUgcmlnaHRcbiAgICAgICAgY3R4LnJvdGF0ZSgwLjUgKiBNYXRoLlBJKTtcbiAgICAgICAgY3R4LnRyYW5zbGF0ZSgwLCAtaGVpZ2h0KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDc6XG4gICAgICAgIC8vIGhvcml6b250YWwgZmxpcCArIDkwIHJvdGF0ZSByaWdodFxuICAgICAgICBjdHgucm90YXRlKDAuNSAqIE1hdGguUEkpO1xuICAgICAgICBjdHgudHJhbnNsYXRlKHdpZHRoLCAtaGVpZ2h0KTtcbiAgICAgICAgY3R4LnNjYWxlKC0xLCAxKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDg6XG4gICAgICAgIC8vIDkwIHJvdGF0ZSBsZWZ0XG4gICAgICAgIGN0eC5yb3RhdGUoLTAuNSAqIE1hdGguUEkpO1xuICAgICAgICBjdHgudHJhbnNsYXRlKC13aWR0aCwgMCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgdmFyIFVSTCA9IHdpbmRvdy5VUkwgJiYgd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwgPyB3aW5kb3cuVVJMIDpcbiAgICAgICAgICAgIHdpbmRvdy53ZWJraXRVUkwgJiYgd2luZG93LndlYmtpdFVSTC5jcmVhdGVPYmplY3RVUkwgPyB3aW5kb3cud2Via2l0VVJMIDpcbiAgICAgICAgICAgIG51bGw7XG5cbiAgLyoqXG4gICAqIE1lZ2FQaXhJbWFnZSBjbGFzc1xuICAgKi9cbiAgZnVuY3Rpb24gTWVnYVBpeEltYWdlKHNyY0ltYWdlKSB7XG4gICAgaWYgKHdpbmRvdy5CbG9iICYmIHNyY0ltYWdlIGluc3RhbmNlb2YgQmxvYikge1xuICAgICAgaWYgKCFVUkwpIHsgdGhyb3cgRXJyb3IoXCJObyBjcmVhdGVPYmplY3RVUkwgZnVuY3Rpb24gZm91bmQgdG8gY3JlYXRlIGJsb2IgdXJsXCIpOyB9XG4gICAgICB2YXIgaW1nID0gbmV3IEltYWdlKCk7XG4gICAgICBpbWcuc3JjID0gVVJMLmNyZWF0ZU9iamVjdFVSTChzcmNJbWFnZSk7XG4gICAgICB0aGlzLmJsb2IgPSBzcmNJbWFnZTtcbiAgICAgIHNyY0ltYWdlID0gaW1nO1xuICAgIH1cbiAgICBpZiAoIXNyY0ltYWdlLm5hdHVyYWxXaWR0aCAmJiAhc3JjSW1hZ2UubmF0dXJhbEhlaWdodCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIHNyY0ltYWdlLm9ubG9hZCA9IHNyY0ltYWdlLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGxpc3RlbmVycyA9IF90aGlzLmltYWdlTG9hZExpc3RlbmVycztcbiAgICAgICAgaWYgKGxpc3RlbmVycykge1xuICAgICAgICAgIF90aGlzLmltYWdlTG9hZExpc3RlbmVycyA9IG51bGw7XG4gICAgICAgICAgZm9yICh2YXIgaT0wLCBsZW49bGlzdGVuZXJzLmxlbmd0aDsgaTxsZW47IGkrKykge1xuICAgICAgICAgICAgbGlzdGVuZXJzW2ldKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdGhpcy5pbWFnZUxvYWRMaXN0ZW5lcnMgPSBbXTtcbiAgICB9XG4gICAgdGhpcy5zcmNJbWFnZSA9IHNyY0ltYWdlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbmRlcmluZyBtZWdhcGl4IGltYWdlIGludG8gc3BlY2lmaWVkIHRhcmdldCBlbGVtZW50XG4gICAqL1xuICBNZWdhUGl4SW1hZ2UucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKHRhcmdldCwgb3B0aW9ucywgY2FsbGJhY2ssIGJsb2JjYWxsYmFjaykge1xuICAgIGlmICh0aGlzLmltYWdlTG9hZExpc3RlbmVycykge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIHRoaXMuaW1hZ2VMb2FkTGlzdGVuZXJzLnB1c2goZnVuY3Rpb24oKSB7IF90aGlzLnJlbmRlcih0YXJnZXQsIG9wdGlvbnMsIGNhbGxiYWNrLCBibG9iY2FsbGJhY2spOyB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgdmFyIGltZ1dpZHRoID0gdGhpcy5zcmNJbWFnZS5uYXR1cmFsV2lkdGgsIGltZ0hlaWdodCA9IHRoaXMuc3JjSW1hZ2UubmF0dXJhbEhlaWdodCxcbiAgICAgICAgd2lkdGggPSBvcHRpb25zLndpZHRoLCBoZWlnaHQgPSBvcHRpb25zLmhlaWdodCxcbiAgICAgICAgbWF4V2lkdGggPSBvcHRpb25zLm1heFdpZHRoLCBtYXhIZWlnaHQgPSBvcHRpb25zLm1heEhlaWdodCxcbiAgICAgICAgZG9TcXVhc2ggPSAhdGhpcy5ibG9iIHx8IHRoaXMuYmxvYi50eXBlID09PSAnaW1hZ2UvanBlZyc7XG4gICAgaWYgKHdpZHRoICYmICFoZWlnaHQpIHtcbiAgICAgIGhlaWdodCA9IChpbWdIZWlnaHQgKiB3aWR0aCAvIGltZ1dpZHRoKSA8PCAwO1xuICAgIH0gZWxzZSBpZiAoaGVpZ2h0ICYmICF3aWR0aCkge1xuICAgICAgd2lkdGggPSAoaW1nV2lkdGggKiBoZWlnaHQgLyBpbWdIZWlnaHQpIDw8IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdpZHRoID0gaW1nV2lkdGg7XG4gICAgICBoZWlnaHQgPSBpbWdIZWlnaHQ7XG4gICAgfVxuICAgIGlmIChtYXhXaWR0aCAmJiB3aWR0aCA+IG1heFdpZHRoKSB7XG4gICAgICB3aWR0aCA9IG1heFdpZHRoO1xuICAgICAgaGVpZ2h0ID0gKGltZ0hlaWdodCAqIHdpZHRoIC8gaW1nV2lkdGgpIDw8IDA7XG4gICAgfVxuICAgIGlmIChtYXhIZWlnaHQgJiYgaGVpZ2h0ID4gbWF4SGVpZ2h0KSB7XG4gICAgICBoZWlnaHQgPSBtYXhIZWlnaHQ7XG4gICAgICB3aWR0aCA9IChpbWdXaWR0aCAqIGhlaWdodCAvIGltZ0hlaWdodCkgPDwgMDtcbiAgICB9XG4gICAgdmFyIG9wdCA9IHsgd2lkdGggOiB3aWR0aCwgaGVpZ2h0IDogaGVpZ2h0IH07XG4gICAgZm9yICh2YXIgayBpbiBvcHRpb25zKSBvcHRba10gPSBvcHRpb25zW2tdO1xuXG4gICAgLy9MdXRoZXJcbiAgICBpZih0YXJnZXQ9PW51bGwpIHtcbiAgICAgIHJlbmRlckltYWdlVG9CbG9iKHRoaXMuc3JjSW1hZ2UsIG9wdCwgZG9TcXVhc2gsIGJsb2JjYWxsYmFjayk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgdGFnTmFtZSA9IHRhcmdldC50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmICh0YWdOYW1lID09PSAnaW1nJykge1xuICAgICAgICAgICAgdGFyZ2V0LnNyYyA9IHJlbmRlckltYWdlVG9EYXRhVVJMKHRoaXMuc3JjSW1hZ2UsIG9wdCwgZG9TcXVhc2gpO1xuICAgICAgICB9IGVsc2UgaWYgKHRhZ05hbWUgPT09ICdjYW52YXMnKSB7XG4gICAgICAgICAgICByZW5kZXJJbWFnZVRvQ2FudmFzKHRoaXMuc3JjSW1hZ2UsIHRhcmdldCwgb3B0LCBkb1NxdWFzaCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy9MdXRoZXJcblxuICAgIGlmICh0eXBlb2YgdGhpcy5vbnJlbmRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpcy5vbnJlbmRlcih0YXJnZXQpO1xuICAgIH1cbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfVxuICAgIGlmICh0aGlzLmJsb2IpIHtcbiAgICAgIHRoaXMuYmxvYiA9IG51bGw7XG4gICAgICBVUkwucmV2b2tlT2JqZWN0VVJMKHRoaXMuc3JjSW1hZ2Uuc3JjKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEV4cG9ydCBjbGFzcyB0byBnbG9iYWxcbiAgICovXG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoW10sIGZ1bmN0aW9uKCkgeyByZXR1cm4gTWVnYVBpeEltYWdlOyB9KTsgLy8gZm9yIEFNRCBsb2FkZXJcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IE1lZ2FQaXhJbWFnZTsgLy8gZm9yIENvbW1vbkpTXG4gIH0gZWxzZSB7XG4gICAgdGhpcy5NZWdhUGl4SW1hZ2UgPSBNZWdhUGl4SW1hZ2U7XG4gIH1cblxufSkoKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy91dGlsL2ltYWdlLW1lZ2FwaXguanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///608\n");

/***/ }),

/***/ 644:
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"page-upload\"\n  }, [_c('List', [_c('Item', [_c('Upload', {\n    attrs: {\n      \"action\": \"http://ysbd-dev.xbdedu.cn/api/file/?filetype=4\",\n      \"on-success\": _vm._on_upload_success\n    },\n    on: {\n      \"terminate\": _vm._on_upload_terminate,\n      \"prepare\": _vm._on_upload_prepare\n    }\n  }, [_c('Button', {\n    attrs: {\n      \"type\": \"outline\",\n      \"color\": \"positive\",\n      \"icon\": \"fa-cloud\"\n    }\n  }, [_vm._v(\"单文件\")])], 1)], 1), _vm._v(\" \"), _c('Item', [_c('Upload', {\n    attrs: {\n      \"action\": \"http://ysbd-dev.xbdedu.cn/api/file/?filetype=4\",\n      \"accept\": \"image/*\",\n      \"data\": {\n        'filetype': 4\n      },\n      \"format\": ['jpg', 'jpeg', 'png'],\n      \"per-size\": 10 * 1024 * 1024,\n      \"max-size\": 10 * 1024 * 1024 * 4,\n      \"max-num\": 4,\n      \"on-progress\": _vm._on_upload_progress,\n      \"on-success\": _vm._on_upload_success,\n      \"on-error\": _vm._on_upload_error,\n      \"on-preview\": _vm._on_file_preview,\n      \"on-remove\": _vm._on_file_remove,\n      \"on-format-error\": _vm._on_file_format_error,\n      \"on-exceeded-size\": _vm._on_file_exceeded_size,\n      \"multiple\": \"\"\n    },\n    on: {\n      \"terminate\": _vm._on_upload_terminate,\n      \"prepare\": _vm._on_upload_prepare\n    }\n  }, [_c('Button', {\n    attrs: {\n      \"type\": \"outline\",\n      \"color\": \"positive\",\n      \"icon\": \"fa-cloud\"\n    }\n  }, [_vm._v(\"多文件\")])], 1)], 1)], 1)], 1)\n},staticRenderFns: []}\nmodule.exports.render._withStripped = true\nif (true) {\n  module.hot.accept()\n  if (module.hot.data) {\n     __webpack_require__(0).rerender(\"data-v-743fe797\", module.exports)\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZGVtby9wYWdlL3BhZ2VfZm9ybV91cGxvYWQudnVlPzU5OWQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZ0JBQWdCLG1CQUFtQixhQUFhLDBCQUEwQjtBQUMxRTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjY0NC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24gKCl7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7XG4gIHJldHVybiBfYygnZGl2Jywge1xuICAgIHN0YXRpY0NsYXNzOiBcInBhZ2UtdXBsb2FkXCJcbiAgfSwgW19jKCdMaXN0JywgW19jKCdJdGVtJywgW19jKCdVcGxvYWQnLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwiYWN0aW9uXCI6IFwiaHR0cDovL3lzYmQtZGV2LnhiZGVkdS5jbi9hcGkvZmlsZS8/ZmlsZXR5cGU9NFwiLFxuICAgICAgXCJvbi1zdWNjZXNzXCI6IF92bS5fb25fdXBsb2FkX3N1Y2Nlc3NcbiAgICB9LFxuICAgIG9uOiB7XG4gICAgICBcInRlcm1pbmF0ZVwiOiBfdm0uX29uX3VwbG9hZF90ZXJtaW5hdGUsXG4gICAgICBcInByZXBhcmVcIjogX3ZtLl9vbl91cGxvYWRfcHJlcGFyZVxuICAgIH1cbiAgfSwgW19jKCdCdXR0b24nLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwidHlwZVwiOiBcIm91dGxpbmVcIixcbiAgICAgIFwiY29sb3JcIjogXCJwb3NpdGl2ZVwiLFxuICAgICAgXCJpY29uXCI6IFwiZmEtY2xvdWRcIlxuICAgIH1cbiAgfSwgW192bS5fdihcIuWNleaWh+S7tlwiKV0pXSwgMSldLCAxKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ0l0ZW0nLCBbX2MoJ1VwbG9hZCcsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJhY3Rpb25cIjogXCJodHRwOi8veXNiZC1kZXYueGJkZWR1LmNuL2FwaS9maWxlLz9maWxldHlwZT00XCIsXG4gICAgICBcImFjY2VwdFwiOiBcImltYWdlLypcIixcbiAgICAgIFwiZGF0YVwiOiB7XG4gICAgICAgICdmaWxldHlwZSc6IDRcbiAgICAgIH0sXG4gICAgICBcImZvcm1hdFwiOiBbJ2pwZycsICdqcGVnJywgJ3BuZyddLFxuICAgICAgXCJwZXItc2l6ZVwiOiAxMCAqIDEwMjQgKiAxMDI0LFxuICAgICAgXCJtYXgtc2l6ZVwiOiAxMCAqIDEwMjQgKiAxMDI0ICogNCxcbiAgICAgIFwibWF4LW51bVwiOiA0LFxuICAgICAgXCJvbi1wcm9ncmVzc1wiOiBfdm0uX29uX3VwbG9hZF9wcm9ncmVzcyxcbiAgICAgIFwib24tc3VjY2Vzc1wiOiBfdm0uX29uX3VwbG9hZF9zdWNjZXNzLFxuICAgICAgXCJvbi1lcnJvclwiOiBfdm0uX29uX3VwbG9hZF9lcnJvcixcbiAgICAgIFwib24tcHJldmlld1wiOiBfdm0uX29uX2ZpbGVfcHJldmlldyxcbiAgICAgIFwib24tcmVtb3ZlXCI6IF92bS5fb25fZmlsZV9yZW1vdmUsXG4gICAgICBcIm9uLWZvcm1hdC1lcnJvclwiOiBfdm0uX29uX2ZpbGVfZm9ybWF0X2Vycm9yLFxuICAgICAgXCJvbi1leGNlZWRlZC1zaXplXCI6IF92bS5fb25fZmlsZV9leGNlZWRlZF9zaXplLFxuICAgICAgXCJtdWx0aXBsZVwiOiBcIlwiXG4gICAgfSxcbiAgICBvbjoge1xuICAgICAgXCJ0ZXJtaW5hdGVcIjogX3ZtLl9vbl91cGxvYWRfdGVybWluYXRlLFxuICAgICAgXCJwcmVwYXJlXCI6IF92bS5fb25fdXBsb2FkX3ByZXBhcmVcbiAgICB9XG4gIH0sIFtfYygnQnV0dG9uJywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcInR5cGVcIjogXCJvdXRsaW5lXCIsXG4gICAgICBcImNvbG9yXCI6IFwicG9zaXRpdmVcIixcbiAgICAgIFwiaWNvblwiOiBcImZhLWNsb3VkXCJcbiAgICB9XG4gIH0sIFtfdm0uX3YoXCLlpJrmlofku7ZcIildKV0sIDEpXSwgMSldLCAxKV0sIDEpXG59LHN0YXRpY1JlbmRlckZuczogW119XG5tb2R1bGUuZXhwb3J0cy5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcbmlmIChtb2R1bGUuaG90KSB7XG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKG1vZHVsZS5ob3QuZGF0YSkge1xuICAgICByZXF1aXJlKFwidnVlLWxvYWRlci9ub2RlX21vZHVsZXMvdnVlLWhvdC1yZWxvYWQtYXBpXCIpLnJlcmVuZGVyKFwiZGF0YS12LTc0M2ZlNzk3XCIsIG1vZHVsZS5leHBvcnRzKVxuICB9XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyP3tcImlkXCI6XCJkYXRhLXYtNzQzZmU3OTdcIn0hLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3NyYy9kZW1vL3BhZ2UvcGFnZV9mb3JtX3VwbG9hZC52dWVcbi8vIG1vZHVsZSBpZCA9IDY0NFxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///644\n");

/***/ }),

/***/ 698:
/***/ (function(module, exports, __webpack_require__) {

eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(532);\nif(typeof content === 'string') content = [[module.i, content, '']];\n// add the styles to the DOM\nvar update = __webpack_require__(38)(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(true) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(532, function() {\n\t\t\tvar newContent = __webpack_require__(532);\n\t\t\tif(typeof newContent === 'string') newContent = [[module.i, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZGVtby9wYWdlL3BhZ2VfZm9ybV91cGxvYWQudnVlPzNmNmUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQSxxQ0FBcU07QUFDck07QUFDQTtBQUNBLGdEQUF3RjtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQW1NO0FBQ25NLDJDQUEyTTtBQUMzTTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxnQ0FBZ0MsVUFBVSxFQUFFO0FBQzVDIiwiZmlsZSI6IjY5OC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi03NDNmZTc5N1xcXCIsXFxcInNjb3BlZFxcXCI6dHJ1ZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjp0cnVlfSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3BhZ2VfZm9ybV91cGxvYWQudnVlXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9hZGRTdHlsZXMuanNcIikoY29udGVudCwge30pO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG5cdC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdGlmKCFjb250ZW50LmxvY2Fscykge1xuXHRcdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi03NDNmZTc5N1xcXCIsXFxcInNjb3BlZFxcXCI6dHJ1ZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjp0cnVlfSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3BhZ2VfZm9ybV91cGxvYWQudnVlXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi03NDNmZTc5N1xcXCIsXFxcInNjb3BlZFxcXCI6dHJ1ZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjp0cnVlfSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3BhZ2VfZm9ybV91cGxvYWQudnVlXCIpO1xuXHRcdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cdFx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdFx0fSk7XG5cdH1cblx0Ly8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdnVlLXN0eWxlLWxvYWRlciEuL34vY3NzLWxvYWRlciEuL34vdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXI/e1wiaWRcIjpcImRhdGEtdi03NDNmZTc5N1wiLFwic2NvcGVkXCI6dHJ1ZSxcImhhc0lubGluZUNvbmZpZ1wiOnRydWV9IS4vfi9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vc3JjL2RlbW8vcGFnZS9wYWdlX2Zvcm1fdXBsb2FkLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNjk4XG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///698\n");

/***/ })

});